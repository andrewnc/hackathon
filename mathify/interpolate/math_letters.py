import numpy as np

"""Each character is drawn as if it was at the first character (0,0), shift will take care of all necessary modifications."""

def scale_coords(coords, x_scale, y_scale):
    np_coords = np.array(coords, dtype="float64")
    np_coords[:,::2] = np_coords[:,::2]*x_scale
    np_coords[:,1::2] = np_coords[:,1::2]*y_scale
    final_x = np.max(np_coords[:,::2])
    final_y = np.max(np_coords[:,1::2])
    return np_coords.tolist(), final_x, final_y

def shift_coords(x_shift, y_shift, coords):
    """Recall that coords are set up in this format: [x1,y1,x2,y2,x3,y3,x4,y4]"""
    for points in coords:
        points[0] += x_shift
        points[2] += x_shift
        points[4] += x_shift
        points[6] += x_shift

        points[1] += y_shift
        points[3] += y_shift
        points[5] += y_shift
        points[7] += y_shift
    return coords

def write_latex(x1,y1,x2,y2,x3,y3,x4,y4):
    return "(" + str(x1) + "(1-t)^3+" + str(3*x2) + "(1-t)^2t+" + str(3*x3) + "(1-t)t^2+" + str(x4) + "t^3,\\\\ " + str(y1) + "(1-t)^3+" + str(3*y2) + "(1-t)^2t+" + str(3*y3) + "(1-t)t^2+" + str(y4) + "t^3)"

def write_letter(coords, final_x, final_y):
    li = []
    for a in coords:
        if len(a) == 8:
            li.append(write_latex(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7]))
        else:
            continue
    return li, final_x, final_y

def char(c, x_shift, y_shift=0):
    """NOTE: When building characters make sure that the coordinates are set up
    to have [x1,y1,x2,y2,x3,y3,x4,y4]
    Parameters:
    c (str): The character to be drawn
    x_shift (int): the amount of horizontal shift needed.
    y_shift (int): The amount of vertical shift needed.
    """
    if c.islower() == True:
        c = c.upper()
        x_scale = 0.7
        y_scale = 0.7
    else:
        x_scale = 1
        y_scale = 1
    silly = False
    if silly == True:
        x_scale = np.random.randint(25,100)/100.
        y_scale = np.random.randint(25,100)/100.
    if c == 'A':
        return A(x_shift, y_shift, x_scale, y_scale)
    elif c == 'B':
        return B(x_shift, y_shift, x_scale, y_scale)
    elif c == 'C':
        return C(x_shift, y_shift, x_scale, y_scale)
    elif c == 'D':
        return D(x_shift, y_shift, x_scale, y_scale)
    elif c == 'E':
        return E(x_shift, y_shift, x_scale, y_scale)
    elif c == 'F':
        return F(x_shift, y_shift, x_scale, y_scale)
    elif c == 'G':
        return G(x_shift, y_shift, x_scale, y_scale)
    elif c == 'H':
        return H(x_shift, y_shift, x_scale, y_scale)
    elif c == 'I':
        return I(x_shift, y_shift, x_scale, y_scale)
    elif c == 'J':
        return J(x_shift, y_shift, x_scale, y_scale)
    elif c == 'K':
        return K(x_shift, y_shift, x_scale, y_scale)
    elif c == 'L':
        return L(x_shift, y_shift, x_scale, y_scale)
    elif c == 'M':
        return M(x_shift, y_shift, x_scale, y_scale)
    elif c == 'N':
        return N(x_shift, y_shift, x_scale, y_scale)
    elif c == 'O':
        return O(x_shift, y_shift, x_scale, y_scale)
    elif c == 'P':
        return P(x_shift, y_shift, x_scale, y_scale)
    elif c == 'Q':
        return Q(x_shift, y_shift, x_scale, y_scale)
    elif c == 'R':
        return R(x_shift, y_shift, x_scale, y_scale)
    elif c == 'S':
        return S(x_shift, y_shift, x_scale, y_scale)
    elif c == 'T':
        return T(x_shift, y_shift, x_scale, y_scale)
    elif c == 'U':
        return U(x_shift, y_shift, x_scale, y_scale)
    elif c == 'V':
        return V(x_shift, y_shift, x_scale, y_scale)
    elif c == 'W':
        return W(x_shift, y_shift, x_scale, y_scale)
    elif c == 'X':
        return X(x_shift, y_shift, x_scale, y_scale)
    elif c == 'Y':
        return Y(x_shift, y_shift, x_scale, y_scale)
    elif c == 'Z':
        return Z(x_shift, y_shift, x_scale, y_scale)
    elif c == ' ':
        x_shift += 150
        return None, x_shift, y_shift
    else:
        return None, x_shift, y_shift

def template_letter(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = []
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def A(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[0,0,260,700,0,0,260,700],[260,700,380,700,260,700,380,700],[380,700,635,0,380,700,635,0],[635,0,535,0,635,0,535,0],[535,0,455,200,535,0,455,200],[455,200,175,200,455,200,175,200],[175,200,100,0,175,200,100,0],[100,0,0,0,100,0,0,0],[211,300,322,600,211,300,322,600],[322,600,433,300,322,600,433,300],[211,300,422,300,211,300,422,300]]
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def B(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[35.28225806451616, 0.2604166666666856, 35.28225806451616, 449.99999999999994, 35.28225806451616, 3.1250000000000284, 35.28225806451616, 449.99999999999994], [35.28225806451616, 449.99999999999994, 188.3064516129033, 449.99999999999994, 39.7177419354839, 452.8645833333333, 186.0887096774194, 449.99999999999994], [186.0887096774194, 449.99999999999994, 245.9677419354839, 432.81249999999994, 186.0887096774194, 449.99999999999994, 248.1854838709678, 435.6770833333333], [248.1854838709678, 435.6770833333333, 290.32258064516134, 366.9270833333333, 257.0564516129033, 429.9479166666667, 290.32258064516134, 378.3854166666667], [290.32258064516134, 375.5208333333333, 281.45161290322585, 280.9895833333333, 292.54032258064524, 361.1979166666667, 277.01612903225816, 283.8541666666667], [277.01612903225816, 283.8541666666667, 245.9677419354839, 246.61458333333331, 281.45161290322585, 280.9895833333333, 245.9677419354839, 240.88541666666669], [245.9677419354839, 240.88541666666669, 301.4112903225807, 183.59375, 245.9677419354839, 243.75, 296.9758064516129, 197.91666666666669], [299.1935483870968, 192.1875, 308.0645161290323, 152.08333333333337, 299.1935483870968, 192.1875, 308.0645161290323, 154.94791666666669], [308.0645161290323, 149.21875, 308.0645161290323, 103.38541666666669, 312.5, 137.76041666666669, 305.8467741935484, 97.65625], [305.8467741935484, 97.65625, 283.66935483870975, 43.229166666666686, 303.6290322580645, 86.19791666666669, 281.45161290322585, 43.229166666666686], [281.45161290322585, 43.229166666666686, 239.3145161290323, 5.989583333333371, 290.32258064516134, 57.55208333333337, 250.4032258064517, 14.583333333333371], [250.4032258064517, 14.583333333333371, 197.17741935483878, -5.468749999999972, 252.6209677419355, 14.583333333333371, 210.483870967742, -2.6041666666666288], [210.483870967742, -2.6041666666666288, 37.50000000000006, -2.6041666666666288, 188.3064516129033, -5.468749999999972, 35.28225806451616, -5.468749999999972], [84.07258064516134, 258.0729166666667, 84.07258064516134, 395.5729166666667, 84.07258064516134, 266.6666666666667, 84.07258064516134, 395.5729166666667], [84.07258064516134, 395.5729166666667, 183.87096774193554, 401.3020833333333, 81.85483870967744, 407.03124999999994, 192.74193548387103, 398.43749999999994], [192.74193548387103, 398.43749999999994, 221.57258064516134, 386.9791666666667, 188.3064516129033, 407.03124999999994, 226.00806451612908, 378.3854166666667], [226.00806451612908, 378.3854166666667, 237.0967741935484, 312.50000000000006, 237.0967741935484, 378.3854166666667, 241.5322580645162, 321.09374999999994], [241.5322580645162, 321.09374999999994, 217.1370967741936, 275.2604166666667, 234.8790322580645, 298.1770833333333, 214.91935483870975, 266.6666666666667], [214.91935483870975, 266.6666666666667, 170.5645161290323, 266.6666666666667, 214.91935483870975, 272.3958333333333, 172.78225806451616, 260.9375], [172.78225806451616, 260.9375, 81.85483870967744, 263.8020833333333, 170.5645161290323, 260.9375, 84.07258064516134, 258.0729166666667], [84.07258064516134, 46.09375, 84.07258064516134, 209.375, 81.85483870967744, 54.6875, 84.07258064516134, 212.23958333333337], [84.07258064516134, 206.51041666666669, 177.2177419354839, 209.375, 86.29032258064518, 209.375, 183.87096774193554, 212.23958333333337], [183.87096774193554, 212.23958333333337, 221.57258064516134, 200.78125, 192.74193548387103, 212.23958333333337, 223.79032258064518, 197.91666666666669], [223.79032258064518, 197.91666666666669, 252.6209677419355, 169.27083333333337, 228.22580645161293, 206.51041666666669, 257.0564516129033, 160.67708333333337], [257.0564516129033, 160.67708333333337, 248.1854838709678, 80.46875, 261.491935483871, 132.03125, 250.4032258064517, 86.19791666666669], [250.4032258064517, 86.19791666666669, 210.483870967742, 46.09375, 243.75, 80.46875, 210.483870967742, 54.6875], [210.483870967742, 54.6875, 132.86290322580652, 54.6875, 206.04838709677426, 51.822916666666686, 141.733870967742, 51.822916666666686], [141.733870967742, 51.822916666666686, 84.07258064516134, 48.95833333333337, 150.60483870967744, 48.95833333333337, 86.29032258064518, 48.95833333333337]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)
    #Scale must occur before shift.
    x_shift -= 50

    final_x += x_shift
    final_y += y_shift
    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def C(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[576.4112903225807, 329.68749999999994, 571.9758064516129, 298.1770833333333, 576.4112903225807, 329.68749999999994, 571.9758064516129, 301.0416666666667], [571.9758064516129, 301.0416666666667, 563.1048387096774, 266.6666666666667, 569.7580645161291, 298.1770833333333, 563.1048387096774, 269.53125], [563.1048387096774, 269.53125, 549.7983870967743, 223.69791666666669, 563.1048387096774, 266.6666666666667, 552.0161290322582, 226.5625], [552.0161290322582, 226.5625, 529.8387096774194, 177.86458333333337, 549.7983870967743, 223.69791666666669, 525.4032258064517, 169.27083333333337], [525.4032258064517, 169.27083333333337, 483.26612903225816, 117.70833333333337, 514.3145161290323, 157.8125, 478.83064516129036, 120.57291666666669], [478.83064516129036, 120.57291666666669, 412.29838709677426, 89.0625, 476.61290322580646, 117.70833333333337, 410.08064516129036, 91.92708333333337], [410.08064516129036, 91.92708333333337, 328.0241935483872, 86.19791666666669, 392.3387096774194, 86.19791666666669, 330.241935483871, 86.19791666666669], [330.241935483871, 86.19791666666669, 248.1854838709678, 123.4375, 321.3709677419355, 91.92708333333337, 245.9677419354839, 126.30208333333337], [245.9677419354839, 126.30208333333337, 197.17741935483878, 177.86458333333337, 241.5322580645162, 129.16666666666669, 194.95967741935488, 180.72916666666669], [194.95967741935488, 180.72916666666669, 168.3467741935484, 249.47916666666669, 190.52419354838713, 203.64583333333337, 166.12903225806457, 258.0729166666667], [166.12903225806457, 258.0729166666667, 148.3870967741936, 344.0104166666667, 161.69354838709683, 272.3958333333333, 146.16935483870975, 341.1458333333333], [146.16935483870975, 341.1458333333333, 163.91129032258067, 278.12500000000006, 146.16935483870975, 341.1458333333333, 159.47580645161293, 283.8541666666667], [146.16935483870975, 344.0104166666667, 141.733870967742, 441.40624999999994, 146.16935483870975, 366.9270833333333, 139.5161290322581, 470.0520833333333], [139.5161290322581, 470.0520833333333, 146.16935483870975, 544.53125, 141.733870967742, 464.3229166666667, 148.3870967741936, 553.125], [148.3870967741936, 553.125, 166.12903225806457, 647.65625, 143.95161290322585, 533.0729166666667, 168.3467741935484, 639.0625], [166.12903225806457, 639.0625, 199.39516129032262, 719.2708333333333, 159.47580645161293, 624.7395833333333, 190.52419354838713, 704.9479166666665], [190.52419354838713, 704.9479166666665, 226.00806451612908, 759.375, 192.74193548387103, 710.6770833333333, 228.22580645161293, 765.1041666666665], [228.22580645161293, 765.1041666666665, 292.54032258064524, 808.0729166666665, 243.75, 776.5625, 294.758064516129, 805.2083333333333], [294.758064516129, 805.2083333333333, 367.9435483870968, 825.2604166666665, 294.758064516129, 810.9375, 376.8145161290323, 830.9895833333333], [376.8145161290323, 830.9895833333333, 447.7822580645162, 813.8020833333333, 374.5967741935484, 830.9895833333333, 458.8709677419355, 805.2083333333333], [461.0887096774194, 808.0729166666665, 512.0967741935484, 770.8333333333333, 461.0887096774194, 808.0729166666665, 507.6612903225807, 776.5625], [507.6612903225807, 776.5625, 536.491935483871, 727.8645833333333, 509.8790322580645, 765.1041666666665, 540.9274193548388, 725.0], [540.9274193548388, 725.0, 556.4516129032259, 679.1666666666665, 538.7096774193549, 722.1354166666665, 556.4516129032259, 684.8958333333333], [556.4516129032259, 684.8958333333333, 567.5403225806452, 641.9270833333333, 556.4516129032259, 679.1666666666665, 569.7580645161291, 639.0625], [569.7580645161291, 639.0625, 662.9032258064517, 636.1979166666667, 571.9758064516129, 636.1979166666667, 662.9032258064517, 639.0625], [665.1209677419355, 636.1979166666667, 645.1612903225807, 722.1354166666665, 662.9032258064517, 636.1979166666667, 649.5967741935484, 716.40625], [649.5967741935484, 716.40625, 611.8951612903227, 802.34375, 642.9435483870968, 736.4583333333333, 594.1532258064517, 819.53125], [594.1532258064517, 819.53125, 538.7096774193549, 885.4166666666665, 587.5, 833.8541666666665, 540.9274193548388, 882.5520833333333], [540.9274193548388, 882.5520833333333, 463.3064516129033, 922.6562499999998, 538.7096774193549, 882.5520833333333, 476.61290322580646, 919.7916666666665], [476.61290322580646, 919.7916666666665, 401.2096774193549, 931.2499999999998, 465.5241935483872, 919.7916666666665, 403.4274193548388, 931.2499999999998], [403.4274193548388, 931.2499999999998, 316.9354838709678, 931.2499999999998, 390.1209677419355, 931.2499999999998, 319.1532258064517, 931.2499999999998], [319.1532258064517, 931.2499999999998, 241.5322580645162, 908.3333333333333, 308.0645161290323, 928.3854166666665, 252.6209677419355, 911.1979166666665], [252.6209677419355, 911.1979166666665, 194.95967741935488, 873.9583333333333, 237.0967741935484, 899.7395833333333, 199.39516129032262, 873.9583333333333], [199.39516129032262, 873.9583333333333, 126.20967741935488, 793.75, 199.39516129032262, 873.9583333333333, 135.08064516129036, 805.2083333333333], [135.08064516129036, 805.2083333333333, 84.07258064516134, 730.7291666666665, 123.99193548387103, 793.75, 84.07258064516134, 725.0], [84.07258064516134, 725.0, 57.459677419354875, 656.25, 81.85483870967744, 716.40625, 61.89516129032262, 644.7916666666667], [61.89516129032262, 644.7916666666667, 44.153225806451644, 544.53125, 59.677419354838776, 624.7395833333333, 46.370967741935544, 547.3958333333333], [46.370967741935544, 547.3958333333333, 41.9354838709678, 452.8645833333333, 44.153225806451644, 544.53125, 44.153225806451644, 447.1354166666667], [44.153225806451644, 447.1354166666667, 48.58870967741939, 364.06249999999994, 39.7177419354839, 444.2708333333333, 44.153225806451644, 352.6041666666667], [44.153225806451644, 352.6041666666667, 61.89516129032262, 263.8020833333333, 48.58870967741939, 355.46874999999994, 64.11290322580652, 269.53125], [64.11290322580652, 269.53125, 90.72580645161293, 177.86458333333337, 59.677419354838776, 255.20833333333331, 97.37903225806457, 154.94791666666669], [97.37903225806457, 154.94791666666669, 146.16935483870975, 80.46875, 97.37903225806457, 154.94791666666669, 146.16935483870975, 80.46875], [146.16935483870975, 80.46875, 201.61290322580652, 17.447916666666686, 143.95161290322585, 77.60416666666669, 199.39516129032262, 23.17708333333337], [199.39516129032262, 23.17708333333337, 263.7096774193549, -16.927083333333286, 206.04838709677426, 17.447916666666686, 281.45161290322585, -19.79166666666663], [281.45161290322585, -19.79166666666663, 359.07258064516134, -34.114583333333286, 292.54032258064524, -19.79166666666663, 372.3790322580645, -34.114583333333286], [372.3790322580645, -34.114583333333286, 472.1774193548388, -2.6041666666666288, 383.4677419354839, -28.38541666666663, 476.61290322580646, 0.2604166666666856], [476.61290322580646, 0.2604166666666856, 538.7096774193549, 43.229166666666686, 487.70161290322585, 5.989583333333371, 556.4516129032259, 48.95833333333337], [556.4516129032259, 48.95833333333337, 609.6774193548388, 120.57291666666669, 571.9758064516129, 63.28125, 614.1129032258065, 120.57291666666669], [614.1129032258065, 120.57291666666669, 642.9435483870968, 180.72916666666669, 611.8951612903227, 120.57291666666669, 642.9435483870968, 189.32291666666669], [642.9435483870968, 189.32291666666669, 656.25, 243.75, 638.5080645161291, 186.45833333333337, 658.4677419354839, 246.61458333333331], [656.25, 243.75, 671.7741935483872, 329.68749999999994, 656.25, 240.88541666666669, 669.5564516129033, 326.8229166666667], [669.5564516129033, 326.8229166666667, 576.4112903225807, 326.8229166666667, 667.3387096774194, 332.5520833333333, 578.6290322580645, 332.5520833333333]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)
    x_shift -= 50
    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def D(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[79.6370967741936, -2.6041666666666288, 75.20161290322585, 911.1979166666665, 79.6370967741936, -5.468749999999972, 75.20161290322585, 914.0624999999998], [75.20161290322585, 914.0624999999998, 330.241935483871, 911.1979166666665, 81.85483870967744, 911.1979166666665, 356.85483870967744, 911.1979166666665], [356.85483870967744, 911.1979166666665, 454.4354838709678, 891.1458333333333, 387.9032258064517, 905.4687499999998, 443.3467741935484, 899.7395833333333], [443.3467741935484, 899.7395833333333, 518.75, 859.6354166666665, 456.6532258064517, 891.1458333333333, 520.9677419354839, 862.5], [520.9677419354839, 862.5, 583.0645161290323, 796.6145833333333, 529.8387096774194, 848.1770833333333, 591.9354838709678, 779.4270833333333], [591.9354838709678, 779.4270833333333, 638.5080645161291, 682.03125, 591.9354838709678, 776.5625, 636.2903225806452, 673.4375], [636.2903225806452, 673.4375, 654.0322580645162, 598.9583333333333, 640.7258064516129, 664.84375, 660.6854838709678, 576.0416666666667], [660.6854838709678, 576.0416666666667, 662.9032258064517, 472.9166666666667, 658.4677419354839, 558.8541666666667, 667.3387096774194, 472.9166666666667], [667.3387096774194, 472.9166666666667, 656.25, 346.87499999999994, 662.9032258064517, 438.5416666666667, 658.4677419354839, 358.3333333333333], [658.4677419354839, 358.3333333333333, 642.9435483870968, 269.53125, 658.4677419354839, 366.9270833333333, 638.5080645161291, 260.9375], [638.5080645161291, 260.9375, 603.0241935483872, 160.67708333333337, 634.0725806451613, 240.88541666666669, 607.4596774193549, 172.13541666666669], [607.4596774193549, 172.13541666666669, 574.1935483870968, 103.38541666666669, 614.1129032258065, 175.0, 574.1935483870968, 106.25], [574.1935483870968, 106.25, 534.2741935483872, 60.416666666666686, 585.2822580645162, 117.70833333333337, 534.2741935483872, 54.6875], [534.2741935483872, 54.6875, 481.04838709677426, 23.17708333333337, 527.6209677419355, 54.6875, 481.04838709677426, 17.447916666666686], [481.04838709677426, 17.447916666666686, 401.2096774193549, -2.6041666666666288, 476.61290322580646, 26.041666666666686, 407.86290322580646, -5.468749999999972], [407.86290322580646, -5.468749999999972, 81.85483870967744, -5.468749999999972, 401.2096774193549, 0.2604166666666856, 77.41935483870975, -5.468749999999972], [177.2177419354839, 103.38541666666669, 177.2177419354839, 802.34375, 175.00000000000006, 100.52083333333337, 177.2177419354839, 802.34375], [177.2177419354839, 802.34375, 374.5967741935484, 802.34375, 177.2177419354839, 799.4791666666665, 363.508064516129, 799.4791666666665], [363.508064516129, 799.4791666666665, 412.29838709677426, 790.8854166666665, 374.5967741935484, 802.34375, 416.73387096774195, 788.0208333333333], [416.73387096774195, 788.0208333333333, 452.2177419354839, 773.6979166666665, 421.16935483870975, 790.8854166666665, 456.6532258064517, 770.8333333333333], [456.6532258064517, 770.8333333333333, 496.57258064516134, 730.7291666666665, 463.3064516129033, 765.1041666666665, 501.00806451612914, 727.8645833333333], [501.00806451612914, 727.8645833333333, 532.0564516129033, 670.5729166666667, 505.4435483870968, 722.1354166666665, 527.6209677419355, 673.4375], [527.6209677419355, 673.4375, 549.7983870967743, 604.6875, 534.2741935483872, 661.9791666666667, 547.5806451612904, 610.4166666666667], [547.5806451612904, 610.4166666666667, 558.6693548387098, 555.9895833333333, 547.5806451612904, 610.4166666666667, 558.6693548387098, 558.8541666666667], [558.6693548387098, 558.8541666666667, 563.1048387096774, 470.0520833333333, 560.8870967741937, 555.9895833333333, 569.7580645161291, 444.2708333333333], [569.7580645161291, 444.2708333333333, 554.233870967742, 338.28124999999994, 560.8870967741937, 421.3541666666667, 549.7983870967743, 321.09374999999994], [549.7983870967743, 321.09374999999994, 525.4032258064517, 229.42708333333331, 549.7983870967743, 312.50000000000006, 514.3145161290323, 206.51041666666669], [514.3145161290323, 206.51041666666669, 492.13709677419365, 175.0, 518.75, 212.23958333333337, 494.35483870967744, 169.27083333333337], [494.35483870967744, 169.27083333333337, 465.5241935483872, 137.76041666666669, 489.91935483870975, 166.40625, 465.5241935483872, 140.625], [465.5241935483872, 140.625, 416.73387096774195, 114.84375, 465.5241935483872, 140.625, 412.29838709677426, 114.84375], [412.29838709677426, 114.84375, 365.7258064516129, 114.84375, 410.08064516129036, 114.84375, 367.9435483870968, 109.11458333333337], [367.9435483870968, 109.11458333333337, 175.00000000000006, 103.38541666666669, 367.9435483870968, 100.52083333333337, 177.2177419354839, 103.38541666666669]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def E(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[0,0,0,700,0,0,0,700],[0,700,450,700,0,700,450,700],[450,700,450,600,450,700,450,600],[450,600,100,600,450,600,100,600],[100,600,100,400,100,600,100,400],[100,400,400,400,100,400,400,400],[400,400,400,300,400,400,400,300],[400,300,100,300,400,300,100,300],[100,300,100,100,100,300,100,100],[100,100,450,100,100,100,450,100],[450,100,450,0,450,100,450,0],[450,0,0,0,450,0,0,0]]
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def F(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[0,0,0,700,0,0,0,700],[0,700,450,700,0,700,450,700],[450,700,450,600,450,700,450,600],[450,600,100,600,450,600,100,600],[100,600,100,400,100,600,100,400],[100,400,300,400,100,400,300,400],[300,400,300,300,300,400,300,300],[300,300,100,300,300,300,100,300],[100,300,100,0,100,300,100,0],[100,0,0,0,100,0,0,0]]
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def G(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[46.370967741935544, 418.4895833333333, 46.370967741935544, 481.5104166666667, 46.370967741935544, 407.03124999999994, 46.370967741935544, 458.59374999999994], [46.370967741935544, 458.59374999999994, 50.80645161290329, 550.2604166666667, 48.58870967741939, 452.8645833333333, 50.80645161290329, 550.2604166666667], [50.80645161290329, 550.2604166666667, 70.7661290322581, 647.65625, 57.459677419354875, 558.8541666666667, 81.85483870967744, 659.1145833333333], [81.85483870967744, 659.1145833333333, 106.25000000000006, 750.78125, 81.85483870967744, 673.4375, 121.77419354838713, 770.8333333333333], [121.77419354838713, 770.8333333333333, 161.69354838709683, 830.9895833333333, 123.99193548387103, 776.5625, 163.91129032258067, 830.9895833333333], [163.91129032258067, 830.9895833333333, 217.1370967741936, 891.1458333333333, 161.69354838709683, 833.8541666666665, 221.57258064516134, 888.2812499999998], [221.57258064516134, 888.2812499999998, 290.32258064516134, 916.9270833333333, 239.3145161290323, 894.0104166666665, 308.0645161290323, 928.3854166666665], [308.0645161290323, 928.3854166666665, 383.4677419354839, 931.2499999999998, 308.0645161290323, 928.3854166666665, 383.4677419354839, 931.2499999999998], [383.4677419354839, 931.2499999999998, 465.5241935483872, 931.2499999999998, 396.7741935483872, 931.2499999999998, 467.741935483871, 931.2499999999998], [467.741935483871, 931.2499999999998, 543.1451612903227, 894.0104166666665, 481.04838709677426, 911.1979166666665, 558.6693548387098, 876.8229166666665], [558.6693548387098, 876.8229166666665, 611.8951612903227, 833.8541666666665, 549.7983870967743, 879.6874999999998, 611.8951612903227, 825.2604166666665], [611.8951612903227, 825.2604166666665, 656.25, 747.9166666666665, 620.7661290322582, 822.3958333333333, 658.4677419354839, 745.0520833333333], [658.4677419354839, 745.0520833333333, 685.0806451612904, 627.6041666666667, 649.5967741935484, 765.1041666666665, 680.6451612903227, 639.0625], [680.6451612903227, 639.0625, 587.5, 630.46875, 680.6451612903227, 636.1979166666667, 583.0645161290323, 630.46875], [583.0645161290323, 630.46875, 569.7580645161291, 693.4895833333333, 585.2822580645162, 633.3333333333333, 571.9758064516129, 684.8958333333333], [571.9758064516129, 687.7604166666665, 543.1451612903227, 753.6458333333333, 571.9758064516129, 693.4895833333333, 538.7096774193549, 750.78125], [538.7096774193549, 750.78125, 503.2258064516129, 788.0208333333333, 545.3629032258065, 739.3229166666665, 498.79032258064524, 790.8854166666665], [498.79032258064524, 790.8854166666665, 432.25806451612914, 819.53125, 496.57258064516134, 790.8854166666665, 432.25806451612914, 819.53125], [432.25806451612914, 819.53125, 363.508064516129, 825.2604166666665, 416.73387096774195, 822.3958333333333, 372.3790322580645, 822.3958333333333], [372.3790322580645, 822.3958333333333, 321.3709677419355, 813.8020833333333, 374.5967741935484, 828.125, 303.6290322580645, 805.2083333333333], [303.6290322580645, 805.2083333333333, 232.66129032258067, 756.5104166666665, 310.2822580645162, 813.8020833333333, 243.75, 765.1041666666665], [243.75, 765.1041666666665, 192.74193548387103, 699.21875, 241.5322580645162, 765.1041666666665, 194.95967741935488, 696.3541666666665], [194.95967741935488, 696.3541666666665, 155.04032258064518, 587.5, 201.61290322580652, 716.40625, 155.04032258064518, 581.7708333333333], [155.04032258064518, 581.7708333333333, 137.29838709677426, 461.4583333333333, 155.04032258064518, 564.5833333333333, 148.3870967741936, 455.7291666666667], [148.3870967741936, 455.7291666666667, 152.82258064516134, 346.87499999999994, 146.16935483870975, 444.2708333333333, 148.3870967741936, 352.6041666666667], [46.370967741935544, 441.40624999999994, 50.80645161290329, 355.46874999999994, 50.80645161290329, 455.7291666666667, 50.80645161290329, 366.9270833333333], [50.80645161290329, 366.9270833333333, 57.459677419354875, 289.5833333333333, 46.370967741935544, 386.9791666666667, 57.459677419354875, 286.71875000000006], [57.459677419354875, 286.71875000000006, 75.20161290322585, 200.78125, 53.02419354838713, 289.5833333333333, 86.29032258064518, 200.78125], [86.29032258064518, 200.78125, 108.4677419354839, 140.625, 81.85483870967744, 206.51041666666669, 106.25000000000006, 143.48958333333337], [106.25000000000006, 143.48958333333337, 146.16935483870975, 74.73958333333337, 104.03225806451616, 137.76041666666669, 157.25806451612908, 57.55208333333337], [157.25806451612908, 57.55208333333337, 228.22580645161293, 8.854166666666686, 159.47580645161293, 51.822916666666686, 239.3145161290323, 3.1250000000000284], [239.3145161290323, 3.1250000000000284, 321.3709677419355, -28.38541666666663, 230.44354838709683, 3.1250000000000284, 323.5887096774194, -28.38541666666663], [323.5887096774194, -28.38541666666663, 418.95161290322585, -28.38541666666663, 319.1532258064517, -28.38541666666663, 414.51612903225816, -28.38541666666663], [414.51612903225816, -28.38541666666663, 534.2741935483872, 31.77083333333337, 438.9112903225807, -19.79166666666663, 543.1451612903227, 34.635416666666686], [543.1451612903227, 34.635416666666686, 578.6290322580645, 69.01041666666669, 545.3629032258065, 40.36458333333337, 571.9758064516129, 60.416666666666686], [571.9758064516129, 60.416666666666686, 607.4596774193549, 109.11458333333337, 576.4112903225807, 66.14583333333337, 609.6774193548388, 109.11458333333337], [609.6774193548388, 109.11458333333337, 634.0725806451613, -5.468749999999972, 609.6774193548388, 109.11458333333337, 627.4193548387098, 0.2604166666666856], [627.4193548387098, 0.2604166666666856, 693.9516129032259, 0.2604166666666856, 634.0725806451613, 0.2604166666666856, 693.9516129032259, -5.468749999999972], [693.9516129032259, -5.468749999999972, 691.733870967742, 484.37499999999994, 696.1693548387098, 0.2604166666666856, 691.733870967742, 481.5104166666667], [691.733870967742, 481.5104166666667, 385.6854838709678, 481.5104166666667, 691.733870967742, 487.2395833333333, 379.0322580645162, 487.2395833333333], [379.0322580645162, 487.2395833333333, 381.25, 384.1145833333333, 381.25, 484.37499999999994, 383.4677419354839, 378.3854166666667], [383.4677419354839, 378.3854166666667, 605.241935483871, 381.24999999999994, 383.4677419354839, 384.1145833333333, 603.0241935483872, 384.1145833333333], [603.0241935483872, 384.1145833333333, 596.3709677419355, 289.5833333333333, 603.0241935483872, 378.3854166666667, 596.3709677419355, 283.8541666666667], [596.3709677419355, 283.8541666666667, 574.1935483870968, 206.51041666666669, 594.1532258064517, 280.9895833333333, 574.1935483870968, 203.64583333333337], [574.1935483870968, 203.64583333333337, 540.9274193548388, 146.35416666666669, 571.9758064516129, 195.05208333333337, 545.3629032258065, 157.8125], [545.3629032258065, 157.8125, 483.26612903225816, 103.38541666666669, 540.9274193548388, 154.94791666666669, 494.35483870967744, 111.97916666666669], [494.35483870967744, 111.97916666666669, 434.4758064516129, 91.92708333333337, 501.00806451612914, 111.97916666666669, 434.4758064516129, 89.0625], [432.25806451612914, 89.0625, 336.8951612903227, 89.0625, 436.6935483870968, 91.92708333333337, 372.3790322580645, 89.0625], [372.3790322580645, 89.0625, 305.8467741935484, 89.0625, 370.1612903225807, 89.0625, 310.2822580645162, 89.0625], [310.2822580645162, 89.0625, 252.6209677419355, 117.70833333333337, 305.8467741935484, 94.79166666666669, 259.2741935483872, 109.11458333333337], [254.8387096774194, 114.84375, 206.04838709677426, 186.45833333333337, 254.8387096774194, 132.03125, 192.74193548387103, 200.78125], [192.74193548387103, 200.78125, 166.12903225806457, 278.12500000000006, 190.52419354838713, 206.51041666666669, 157.25806451612908, 306.7708333333333], [157.25806451612908, 306.7708333333333, 146.16935483870975, 378.3854166666667, 157.25806451612908, 298.1770833333333, 143.95161290322585, 392.7083333333333], [143.95161290322585, 404.1666666666667, 143.95161290322585, 507.2916666666667, 146.16935483870975, 398.43749999999994, 146.16935483870975, 492.96874999999994], [146.16935483870975, 492.96874999999994, 159.47580645161293, 604.6875, 148.3870967741936, 504.4270833333333, 166.12903225806457, 613.28125], [166.12903225806457, 613.28125, 179.4354838709678, 673.4375, 157.25806451612908, 590.3645833333333, 183.87096774193554, 679.1666666666665], [183.87096774193554, 679.1666666666665, 241.5322580645162, 765.1041666666665, 192.74193548387103, 684.8958333333333, 241.5322580645162, 762.2395833333333], [241.5322580645162, 762.2395833333333, 274.79838709677426, 790.8854166666665, 252.6209677419355, 767.96875, 292.54032258064524, 802.34375], [292.54032258064524, 802.34375, 332.4596774193549, 816.6666666666665, 290.32258064516134, 796.6145833333333, 341.33064516129036, 819.53125], [341.33064516129036, 819.53125, 394.5564516129033, 822.3958333333333, 336.8951612903227, 822.3958333333333, 385.6854838709678, 822.3958333333333], [385.6854838709678, 822.3958333333333, 441.1290322580645, 810.9375, 394.5564516129033, 822.3958333333333, 430.04032258064524, 819.53125], [430.04032258064524, 819.53125, 469.9596774193549, 802.34375, 430.04032258064524, 816.6666666666665, 474.3951612903227, 799.4791666666665], [478.83064516129036, 799.4791666666665, 523.1854838709678, 767.96875, 478.83064516129036, 799.4791666666665, 525.4032258064517, 765.1041666666665], [525.4032258064517, 765.1041666666665, 554.233870967742, 727.8645833333333, 532.0564516129033, 759.375, 552.0161290322582, 727.8645833333333], [552.0161290322582, 727.8645833333333, 574.1935483870968, 673.4375, 558.6693548387098, 713.5416666666665, 571.9758064516129, 690.625], [571.9758064516129, 690.625, 585.2822580645162, 633.3333333333333, 569.7580645161291, 696.3541666666665, 585.2822580645162, 636.1979166666667], [585.2822580645162, 636.1979166666667, 682.8629032258065, 636.1979166666667, 583.0645161290323, 633.3333333333333, 678.4274193548388, 636.1979166666667]]
    
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def H(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[0,0,0,700,0,0,0,700],[0,700,100,700,0,700,100,700],[100,700,100,400,100,700,100,400],[100,400,450,400,100,400,450,400],[450,400,450,700,450,400,450,700],[450,700,550,700,450,700,550,700],[550,700,550,0,550,700,550,0],[550,0,450,0,550,0,450,0],[450,0,450,300,450,0,450,300],[450,300,100,300,450,300,100,300],[100,300,100,0,100,300,100,0],[100,0,0,0,100,0,0,0]]
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def I(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[0,0,0,100,0,0,0,100],[0,100,100,100,0,100,100,100],[100,100,100,600,100,100,100,600],[100,600,0,600,100,600,0,600],[0,600,0,700,0,600,0,700],[0,700,300,700,0,700,300,700],[300,700,300,600,300,700,300,600],[300,600,200,600,300,600,200,600],[200,600,200,100,200,600,200,100],[200,100,300,100,200,100,300,100],[300,100,300,0,300,100,300,0],[0,0,300,0,0,0,300,0]]
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def J(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[106.25000000000006, 286.71875000000006, 106.25000000000006, 232.29166666666669, 106.25000000000006, 286.71875000000006, 106.25000000000006, 220.83333333333331], [106.25000000000006, 220.83333333333331, 117.33870967741939, 143.48958333333337, 104.03225806451616, 220.83333333333331, 115.12096774193554, 157.8125], [115.12096774193554, 157.8125, 128.42741935483878, 120.57291666666669, 115.12096774193554, 157.8125, 130.64516129032262, 120.57291666666669], [130.64516129032262, 120.57291666666669, 161.69354838709683, 86.19791666666669, 128.42741935483878, 120.57291666666669, 175.00000000000006, 86.19791666666669], [175.00000000000006, 86.19791666666669, 210.483870967742, 77.60416666666669, 175.00000000000006, 83.33333333333337, 210.483870967742, 77.60416666666669], [212.70161290322585, 77.60416666666669, 259.2741935483872, 83.33333333333337, 223.79032258064518, 74.73958333333337, 259.2741935483872, 83.33333333333337], [259.2741935483872, 83.33333333333337, 296.9758064516129, 106.25, 248.1854838709678, 74.73958333333337, 294.758064516129, 109.11458333333337], [294.758064516129, 109.11458333333337, 321.3709677419355, 163.54166666666669, 296.9758064516129, 111.97916666666669, 319.1532258064517, 154.94791666666669], [319.1532258064517, 154.94791666666669, 325.8064516129033, 226.5625, 314.7177419354839, 149.21875, 328.0241935483872, 220.83333333333331], [328.0241935483872, 220.83333333333331, 328.0241935483872, 283.8541666666667, 325.8064516129033, 217.96875, 325.8064516129033, 275.2604166666667], [325.8064516129033, 275.2604166666667, 325.8064516129033, 905.4687499999998, 328.0241935483872, 269.53125, 328.0241935483872, 908.3333333333333], [328.0241935483872, 908.3333333333333, 421.16935483870975, 902.6041666666665, 325.8064516129033, 908.3333333333333, 421.16935483870975, 911.1979166666665], [421.16935483870975, 908.3333333333333, 421.16935483870975, 249.47916666666669, 421.16935483870975, 902.6041666666665, 418.95161290322585, 243.75], [418.95161290322585, 243.75, 410.08064516129036, 146.35416666666669, 423.38709677419365, 215.10416666666669, 410.08064516129036, 140.625], [410.08064516129036, 140.625, 394.5564516129033, 86.19791666666669, 418.95161290322585, 152.08333333333337, 396.7741935483872, 89.0625], [396.7741935483872, 89.0625, 363.508064516129, 37.50000000000006, 394.5564516129033, 86.19791666666669, 367.9435483870968, 40.36458333333337], [367.9435483870968, 40.36458333333337, 314.7177419354839, -8.333333333333314, 365.7258064516129, 37.50000000000006, 310.2822580645162, -8.333333333333314], [310.2822580645162, -8.333333333333314, 254.8387096774194, -25.520833333333286, 312.5, -11.197916666666629, 254.8387096774194, -25.520833333333286], [254.8387096774194, -25.520833333333286, 217.1370967741936, -28.38541666666663, 243.75, -25.520833333333286, 219.35483870967744, -25.520833333333286], [219.35483870967744, -25.520833333333286, 188.3064516129033, -25.520833333333286, 212.70161290322585, -25.520833333333286, 186.0887096774194, -25.520833333333286], [186.0887096774194, -25.520833333333286, 130.64516129032262, -16.927083333333286, 175.00000000000006, -25.520833333333286, 141.733870967742, -16.927083333333286], [141.733870967742, -16.927083333333286, 115.12096774193554, 0.2604166666666856, 141.733870967742, -25.520833333333286, 128.42741935483878, -11.197916666666629], [101.81451612903231, 5.989583333333371, 61.89516129032262, 34.635416666666686, 108.4677419354839, -2.6041666666666288, 59.677419354838776, 31.77083333333337], [59.677419354838776, 34.635416666666686, 39.7177419354839, 77.60416666666669, 68.54838709677426, 37.50000000000006, 46.370967741935544, 71.875], [46.370967741935544, 71.875, 26.41129032258067, 140.625, 37.50000000000006, 86.19791666666669, 26.41129032258067, 134.89583333333337], [24.193548387096826, 134.89583333333337, 19.75806451612908, 192.1875, 19.75806451612908, 149.21875, 19.75806451612908, 203.64583333333337], [19.75806451612908, 195.05208333333337, 19.75806451612908, 286.71875000000006, 19.75806451612908, 212.23958333333337, 19.75806451612908, 286.71875000000006], [15.322580645161338, 286.71875000000006, 104.03225806451616, 286.71875000000006, 15.322580645161338, 289.5833333333333, 106.25000000000006, 289.5833333333333]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def K(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[75.20161290322585, 908.3333333333333, 72.983870967742, -2.6041666666666288, 77.41935483870975, 908.3333333333333, 75.20161290322585, -2.6041666666666288], [75.20161290322585, -2.6041666666666288, 166.12903225806457, -5.468749999999972, 75.20161290322585, -2.6041666666666288, 170.5645161290323, -2.6041666666666288], [170.5645161290323, -2.6041666666666288, 168.3467741935484, 309.6354166666667, 168.3467741935484, 0.2604166666666856, 168.3467741935484, 312.50000000000006], [168.3467741935484, 309.6354166666667, 281.45161290322585, 447.1354166666667, 170.5645161290323, 318.2291666666667, 279.23387096774195, 449.99999999999994], [279.23387096774195, 449.99999999999994, 527.6209677419355, -2.6041666666666288, 283.66935483870975, 449.99999999999994, 529.8387096774194, -5.468749999999972], [529.8387096774194, -5.468749999999972, 654.0322580645162, -2.6041666666666288, 527.6209677419355, -2.6041666666666288, 651.8145161290323, -2.6041666666666288], [651.8145161290323, -2.6041666666666288, 350.20161290322585, 538.8020833333333, 654.0322580645162, -5.468749999999972, 350.20161290322585, 538.8020833333333], [350.20161290322585, 538.8020833333333, 642.9435483870968, 908.3333333333333, 352.41935483870975, 544.53125, 642.9435483870968, 905.4687499999998], [642.9435483870968, 908.3333333333333, 514.3145161290323, 908.3333333333333, 640.7258064516129, 911.1979166666665, 514.3145161290323, 911.1979166666665], [514.3145161290323, 911.1979166666665, 170.5645161290323, 467.18749999999994, 509.8790322580645, 911.1979166666665, 170.5645161290323, 467.18749999999994], [170.5645161290323, 467.18749999999994, 168.3467741935484, 908.3333333333333, 168.3467741935484, 464.3229166666667, 166.12903225806457, 902.6041666666665], [166.12903225806457, 905.4687499999998, 77.41935483870975, 905.4687499999998, 168.3467741935484, 908.3333333333333, 75.20161290322585, 908.3333333333333]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def L(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[75.20161290322585, 905.4687499999998, 170.5645161290323, 905.4687499999998, 72.983870967742, 905.4687499999998, 170.5645161290323, 905.4687499999998], [170.5645161290323, 905.4687499999998, 170.5645161290323, 106.25, 170.5645161290323, 911.1979166666665, 170.5645161290323, 106.25], [170.5645161290323, 106.25, 527.6209677419355, 103.38541666666669, 170.5645161290323, 109.11458333333337, 527.6209677419355, 100.52083333333337], [527.6209677419355, 100.52083333333337, 527.6209677419355, -5.468749999999972, 527.6209677419355, 106.25, 527.6209677419355, -2.6041666666666288], [527.6209677419355, -2.6041666666666288, 75.20161290322585, -5.468749999999972, 527.6209677419355, -2.6041666666666288, 75.20161290322585, -2.6041666666666288], [75.20161290322585, -2.6041666666666288, 72.983870967742, 908.3333333333333, 75.20161290322585, -2.6041666666666288, 75.20161290322585, 908.3333333333333]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def M(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[72.983870967742, -5.468749999999972, 70.7661290322581, 905.4687499999998, 72.983870967742, -2.6041666666666288, 70.7661290322581, 911.1979166666665], [70.7661290322581, 911.1979166666665, 210.483870967742, 911.1979166666665, 72.983870967742, 908.3333333333333, 208.2661290322581, 908.3333333333333], [208.2661290322581, 908.3333333333333, 412.29838709677426, 134.89583333333337, 210.483870967742, 911.1979166666665, 412.29838709677426, 137.76041666666669], [412.29838709677426, 137.76041666666669, 616.3306451612904, 902.6041666666665, 412.29838709677426, 143.48958333333337, 614.1129032258065, 908.3333333333333], [614.1129032258065, 908.3333333333333, 749.3951612903226, 908.3333333333333, 614.1129032258065, 908.3333333333333, 749.3951612903226, 908.3333333333333], [749.3951612903226, 908.3333333333333, 749.3951612903226, 0.2604166666666856, 749.3951612903226, 902.6041666666665, 749.3951612903226, 3.1250000000000284], [751.6129032258065, -5.468749999999972, 660.6854838709678, -2.6041666666666288, 749.3951612903226, -2.6041666666666288, 660.6854838709678, -5.468749999999972], [660.6854838709678, -5.468749999999972, 658.4677419354839, 762.2395833333333, 658.4677419354839, -5.468749999999972, 662.9032258064517, 762.2395833333333], [662.9032258064517, 762.2395833333333, 461.0887096774194, -5.468749999999972, 658.4677419354839, 756.5104166666665, 461.0887096774194, -5.468749999999972], [461.0887096774194, -5.468749999999972, 365.7258064516129, -2.6041666666666288, 458.8709677419355, -2.6041666666666288, 361.29032258064524, -2.6041666666666288], [361.29032258064524, -2.6041666666666288, 163.91129032258067, 765.1041666666665, 361.29032258064524, 0.2604166666666856, 163.91129032258067, 756.5104166666665], [163.91129032258067, 756.5104166666665, 166.12903225806457, -2.6041666666666288, 163.91129032258067, 762.2395833333333, 161.69354838709683, 0.2604166666666856], [161.69354838709683, 0.2604166666666856, 70.7661290322581, -2.6041666666666288, 163.91129032258067, -5.468749999999972, 70.7661290322581, -2.6041666666666288]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def N(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[72.983870967742, -2.6041666666666288, 72.983870967742, 905.4687499999998, 75.20161290322585, -5.468749999999972, 72.983870967742, 905.4687499999998], [72.983870967742, 905.4687499999998, 186.0887096774194, 908.3333333333333, 77.41935483870975, 905.4687499999998, 190.52419354838713, 905.4687499999998], [190.52419354838713, 905.4687499999998, 545.3629032258065, 175.0, 188.3064516129033, 919.7916666666665, 545.3629032258065, 172.13541666666669], [545.3629032258065, 172.13541666666669, 543.1451612903227, 908.3333333333333, 547.5806451612904, 169.27083333333337, 545.3629032258065, 911.1979166666665], [545.3629032258065, 911.1979166666665, 636.2903225806452, 905.4687499999998, 545.3629032258065, 905.4687499999998, 636.2903225806452, 908.3333333333333], [636.2903225806452, 908.3333333333333, 636.2903225806452, 0.2604166666666856, 636.2903225806452, 911.1979166666665, 634.0725806451613, 5.989583333333371], [634.0725806451613, 5.989583333333371, 527.6209677419355, -2.6041666666666288, 631.8548387096774, 0.2604166666666856, 525.4032258064517, -8.333333333333314], [525.4032258064517, -8.333333333333314, 163.91129032258067, 733.59375, 525.4032258064517, -5.468749999999972, 166.12903225806457, 727.8645833333333], [166.12903225806457, 727.8645833333333, 168.3467741935484, 0.2604166666666856, 166.12903225806457, 733.59375, 166.12903225806457, 0.2604166666666856], [166.12903225806457, 0.2604166666666856, 72.983870967742, -5.468749999999972, 163.91129032258067, -2.6041666666666288, 75.20161290322585, -2.6041666666666288], [75.20161290322585, -2.6041666666666288, 75.20161290322585, 908.3333333333333, 75.20161290322585, -5.468749999999972, 77.41935483870975, 908.3333333333333]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)
    x_shift -= 25
    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def O(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[39.7177419354839, 424.21874999999994, 39.7177419354839, 481.5104166666667, 39.7177419354839, 381.24999999999994, 39.7177419354839, 475.78124999999994], [39.7177419354839, 475.78124999999994, 46.370967741935544, 564.5833333333333, 39.7177419354839, 472.9166666666667, 48.58870967741939, 555.9895833333333], [48.58870967741939, 558.8541666666667, 59.677419354838776, 647.65625, 41.9354838709678, 541.6666666666667, 59.677419354838776, 639.0625], [59.677419354838776, 639.0625, 92.94354838709683, 736.4583333333333, 59.677419354838776, 624.7395833333333, 88.50806451612908, 722.1354166666665], [88.50806451612908, 722.1354166666665, 130.64516129032262, 799.4791666666665, 88.50806451612908, 707.8125, 123.99193548387103, 782.2916666666665], [123.99193548387103, 782.2916666666665, 166.12903225806457, 853.90625, 128.42741935483878, 785.15625, 170.5645161290323, 848.1770833333333], [170.5645161290323, 848.1770833333333, 252.6209677419355, 919.7916666666665, 172.78225806451616, 853.90625, 261.491935483871, 922.6562499999998], [261.491935483871, 922.6562499999998, 354.63709677419365, 931.2499999999998, 250.4032258064517, 914.0624999999998, 347.98387096774195, 928.3854166666665], [347.98387096774195, 928.3854166666665, 432.25806451612914, 922.6562499999998, 350.20161290322585, 931.2499999999998, 434.4758064516129, 928.3854166666665], [434.4758064516129, 928.3854166666665, 518.75, 908.3333333333333, 438.9112903225807, 931.2499999999998, 520.9677419354839, 908.3333333333333], [520.9677419354839, 908.3333333333333, 598.5887096774194, 859.6354166666665, 520.9677419354839, 905.4687499999998, 594.1532258064517, 862.5], [594.1532258064517, 865.3645833333333, 649.5967741935484, 799.4791666666665, 589.7177419354839, 859.6354166666665, 651.8145161290323, 785.15625], [651.8145161290323, 785.15625, 698.3870967741937, 682.03125, 649.5967741935484, 785.15625, 702.8225806451613, 682.03125], [702.8225806451613, 682.03125, 722.7822580645162, 573.1770833333333, 700.6048387096774, 673.4375, 720.5645161290323, 584.6354166666667], [720.5645161290323, 584.6354166666667, 729.4354838709678, 481.5104166666667, 720.5645161290323, 587.5, 731.6532258064517, 481.5104166666667], [731.6532258064517, 490.1041666666667, 722.7822580645162, 392.7083333333333, 725.0, 495.8333333333333, 725.0, 407.03124999999994], [725.0, 407.03124999999994, 711.6935483870968, 303.90625000000006, 725.0, 404.1666666666667, 713.9112903225807, 315.3645833333333], [713.9112903225807, 315.3645833333333, 691.733870967742, 226.5625, 713.9112903225807, 306.7708333333333, 696.1693548387098, 232.29166666666669], [696.1693548387098, 232.29166666666669, 673.991935483871, 180.72916666666669, 700.6048387096774, 238.02083333333331, 676.2096774193549, 180.72916666666669], [676.2096774193549, 180.72916666666669, 631.8548387096774, 100.52083333333337, 669.5564516129033, 166.40625, 636.2903225806452, 109.11458333333337], [636.2903225806452, 109.11458333333337, 607.4596774193549, 74.73958333333337, 640.7258064516129, 114.84375, 609.6774193548388, 74.73958333333337], [609.6774193548388, 74.73958333333337, 560.8870967741937, 26.041666666666686, 616.3306451612904, 80.46875, 567.5403225806452, 31.77083333333337], [567.5403225806452, 31.77083333333337, 512.0967741935484, -2.6041666666666288, 565.3225806451613, 31.77083333333337, 509.8790322580645, -2.6041666666666288], [509.8790322580645, -2.6041666666666288, 445.5645161290323, -25.520833333333286, 516.5322580645162, 3.1250000000000284, 445.5645161290323, -25.520833333333286], [445.5645161290323, -25.520833333333286, 365.7258064516129, -34.114583333333286, 423.38709677419365, -28.38541666666663, 365.7258064516129, -28.38541666666663], [365.7258064516129, -28.38541666666663, 279.23387096774195, -16.927083333333286, 365.7258064516129, -34.114583333333286, 292.54032258064524, -19.79166666666663], [292.54032258064524, -19.79166666666663, 234.8790322580645, 0.2604166666666856, 285.88709677419365, -22.65624999999997, 228.22580645161293, 3.1250000000000284], [228.22580645161293, 3.1250000000000284, 166.12903225806457, 54.6875, 221.57258064516134, 8.854166666666686, 166.12903225806457, 54.6875], [166.12903225806457, 54.6875, 117.33870967741939, 114.84375, 163.91129032258067, 54.6875, 112.90322580645164, 120.57291666666669], [112.90322580645164, 120.57291666666669, 79.6370967741936, 195.05208333333337, 119.55645161290329, 111.97916666666669, 72.983870967742, 217.96875], [72.983870967742, 217.96875, 48.58870967741939, 335.4166666666667, 77.41935483870975, 206.51041666666669, 50.80645161290329, 306.7708333333333], [50.80645161290329, 306.7708333333333, 37.50000000000006, 432.81249999999994, 48.58870967741939, 321.09374999999994, 41.9354838709678, 421.3541666666667], [41.9354838709678, 421.3541666666667, 41.9354838709678, 530.2083333333333, 41.9354838709678, 449.99999999999994, 46.370967741935544, 555.9895833333333], [137.29838709677426, 441.40624999999994, 139.5161290322581, 507.2916666666667, 139.5161290322581, 432.81249999999994, 137.29838709677426, 501.56249999999994], [137.29838709677426, 501.56249999999994, 157.25806451612908, 619.0104166666667, 137.29838709677426, 504.4270833333333, 155.04032258064518, 607.5520833333333], [155.04032258064518, 607.5520833333333, 199.39516129032262, 713.5416666666665, 155.04032258064518, 621.875, 206.04838709677426, 719.2708333333333], [206.04838709677426, 719.2708333333333, 265.9274193548388, 793.75, 206.04838709677426, 727.8645833333333, 274.79838709677426, 790.8854166666665], [274.79838709677426, 790.8854166666665, 350.20161290322585, 822.3958333333333, 270.36290322580646, 788.0208333333333, 356.85483870967744, 822.3958333333333], [356.85483870967744, 822.3958333333333, 458.8709677419355, 813.8020833333333, 361.29032258064524, 828.125, 467.741935483871, 808.0729166666665], [467.741935483871, 808.0729166666665, 552.0161290322582, 745.0520833333333, 465.5241935483872, 810.9375, 556.4516129032259, 733.59375], [556.4516129032259, 733.59375, 591.9354838709678, 673.4375, 565.3225806451613, 725.0, 600.8064516129033, 664.84375], [600.8064516129033, 667.7083333333333, 622.983870967742, 573.1770833333333, 600.8064516129033, 656.25, 618.5483870967743, 584.6354166666667], [618.5483870967743, 584.6354166666667, 625.2016129032259, 452.8645833333333, 620.7661290322582, 573.1770833333333, 636.2903225806452, 438.5416666666667], [636.2903225806452, 438.5416666666667, 616.3306451612904, 321.09374999999994, 629.6370967741937, 447.1354166666667, 618.5483870967743, 326.8229166666667], [618.5483870967743, 326.8229166666667, 589.7177419354839, 223.69791666666669, 616.3306451612904, 326.8229166666667, 594.1532258064517, 243.75], [594.1532258064517, 243.75, 547.5806451612904, 149.21875, 591.9354838709678, 249.47916666666669, 545.3629032258065, 152.08333333333337], [545.3629032258065, 152.08333333333337, 469.9596774193549, 94.79166666666669, 560.8870967741937, 186.45833333333337, 483.26612903225816, 106.25], [483.26612903225816, 106.25, 403.4274193548388, 83.33333333333337, 498.79032258064524, 111.97916666666669, 418.95161290322585, 80.46875], [418.95161290322585, 80.46875, 325.8064516129033, 89.0625, 396.7741935483872, 83.33333333333337, 319.1532258064517, 94.79166666666669], [319.1532258064517, 94.79166666666669, 226.00806451612908, 146.35416666666669, 319.1532258064517, 89.0625, 226.00806451612908, 137.76041666666669], [226.00806451612908, 137.76041666666669, 168.3467741935484, 258.0729166666667, 228.22580645161293, 137.76041666666669, 163.91129032258067, 255.20833333333331], [163.91129032258067, 255.20833333333331, 141.733870967742, 358.3333333333333, 168.3467741935484, 255.20833333333331, 132.86290322580652, 384.1145833333333], [132.86290322580652, 384.1145833333333, 137.29838709677426, 495.8333333333333, 137.29838709677426, 369.7916666666667, 137.29838709677426, 490.1041666666667]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def P(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[84.07258064516134, -5.468749999999972, 84.07258064516134, 908.3333333333333, 81.85483870967744, -2.6041666666666288, 84.07258064516134, 908.3333333333333], [84.07258064516134, 908.3333333333333, 416.73387096774195, 914.0624999999998, 84.07258064516134, 911.1979166666665, 412.29838709677426, 908.3333333333333], [412.29838709677426, 908.3333333333333, 472.1774193548388, 894.0104166666665, 412.29838709677426, 905.4687499999998, 501.00806451612914, 888.2812499999998], [501.00806451612914, 888.2812499999998, 558.6693548387098, 836.71875, 489.91935483870975, 891.1458333333333, 560.8870967741937, 833.8541666666665], [560.8870967741937, 833.8541666666665, 605.241935483871, 733.59375, 556.4516129032259, 839.5833333333333, 605.241935483871, 736.4583333333333], [605.241935483871, 736.4583333333333, 614.1129032258065, 621.875, 609.6774193548388, 722.1354166666665, 609.6774193548388, 607.5520833333333], [609.6774193548388, 607.5520833333333, 587.5, 504.4270833333333, 611.8951612903227, 604.6875, 585.2822580645162, 507.2916666666667], [585.2822580645162, 507.2916666666667, 554.233870967742, 449.99999999999994, 585.2822580645162, 504.4270833333333, 558.6693548387098, 458.59374999999994], [558.6693548387098, 458.59374999999994, 496.57258064516134, 395.5729166666667, 567.5403225806452, 464.3229166666667, 507.6612903225807, 407.03124999999994], [507.6612903225807, 407.03124999999994, 436.6935483870968, 378.3854166666667, 503.2258064516129, 404.1666666666667, 441.1290322580645, 386.9791666666667], [441.1290322580645, 386.9791666666667, 398.991935483871, 381.24999999999994, 438.9112903225807, 381.24999999999994, 398.991935483871, 381.24999999999994], [398.991935483871, 381.24999999999994, 181.65322580645164, 384.1145833333333, 416.73387096774195, 384.1145833333333, 181.65322580645164, 381.24999999999994], [181.65322580645164, 381.24999999999994, 181.65322580645164, -2.6041666666666288, 181.65322580645164, 378.3854166666667, 179.4354838709678, 3.1250000000000284], [179.4354838709678, 3.1250000000000284, 79.6370967741936, -2.6041666666666288, 175.00000000000006, -2.6041666666666288, 81.85483870967744, -2.6041666666666288], [177.2177419354839, 484.37499999999994, 183.87096774193554, 802.34375, 181.65322580645164, 487.2395833333333, 183.87096774193554, 799.4791666666665], [183.87096774193554, 799.4791666666665, 383.4677419354839, 808.0729166666665, 179.4354838709678, 802.34375, 401.2096774193549, 802.34375], [401.2096774193549, 802.34375, 454.4354838709678, 785.15625, 405.6451612903227, 799.4791666666665, 463.3064516129033, 767.96875], [463.3064516129033, 767.96875, 505.4435483870968, 713.5416666666665, 465.5241935483872, 782.2916666666665, 507.6612903225807, 704.9479166666665], [507.6612903225807, 704.9479166666665, 509.8790322580645, 619.0104166666667, 509.8790322580645, 702.0833333333333, 509.8790322580645, 613.28125], [509.8790322580645, 613.28125, 489.91935483870975, 535.9375, 516.5322580645162, 627.6041666666667, 492.13709677419365, 538.8020833333333], [492.13709677419365, 538.8020833333333, 441.1290322580645, 495.8333333333333, 489.91935483870975, 544.53125, 438.9112903225807, 495.8333333333333], [438.9112903225807, 495.8333333333333, 376.8145161290323, 484.37499999999994, 432.25806451612914, 498.6979166666667, 376.8145161290323, 492.96874999999994], [376.8145161290323, 492.96874999999994, 179.4354838709678, 492.96874999999994, 385.6854838709678, 492.96874999999994, 177.2177419354839, 495.8333333333333]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def Q(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[39.7177419354839, 424.21874999999994, 39.7177419354839, 481.5104166666667, 39.7177419354839, 381.24999999999994, 39.7177419354839, 475.78124999999994], [39.7177419354839, 475.78124999999994, 46.370967741935544, 564.5833333333333, 39.7177419354839, 472.9166666666667, 48.58870967741939, 555.9895833333333], [48.58870967741939, 558.8541666666667, 59.677419354838776, 647.65625, 41.9354838709678, 541.6666666666667, 59.677419354838776, 639.0625], [59.677419354838776, 639.0625, 92.94354838709683, 736.4583333333333, 59.677419354838776, 624.7395833333333, 88.50806451612908, 722.1354166666665], [88.50806451612908, 722.1354166666665, 130.64516129032262, 799.4791666666665, 88.50806451612908, 707.8125, 123.99193548387103, 782.2916666666665], [123.99193548387103, 782.2916666666665, 166.12903225806457, 853.90625, 128.42741935483878, 785.15625, 170.5645161290323, 848.1770833333333], [170.5645161290323, 848.1770833333333, 252.6209677419355, 919.7916666666665, 172.78225806451616, 853.90625, 261.491935483871, 922.6562499999998], [261.491935483871, 922.6562499999998, 354.63709677419365, 931.2499999999998, 250.4032258064517, 914.0624999999998, 347.98387096774195, 928.3854166666665], [347.98387096774195, 928.3854166666665, 432.25806451612914, 922.6562499999998, 350.20161290322585, 931.2499999999998, 434.4758064516129, 928.3854166666665], [434.4758064516129, 928.3854166666665, 518.75, 908.3333333333333, 438.9112903225807, 931.2499999999998, 520.9677419354839, 908.3333333333333], [520.9677419354839, 908.3333333333333, 598.5887096774194, 859.6354166666665, 520.9677419354839, 905.4687499999998, 594.1532258064517, 862.5], [594.1532258064517, 865.3645833333333, 649.5967741935484, 799.4791666666665, 589.7177419354839, 859.6354166666665, 651.8145161290323, 785.15625], [651.8145161290323, 785.15625, 698.3870967741937, 682.03125, 649.5967741935484, 785.15625, 702.8225806451613, 682.03125], [702.8225806451613, 682.03125, 722.7822580645162, 573.1770833333333, 700.6048387096774, 673.4375, 720.5645161290323, 584.6354166666667], [720.5645161290323, 584.6354166666667, 729.4354838709678, 481.5104166666667, 720.5645161290323, 587.5, 731.6532258064517, 481.5104166666667], [731.6532258064517, 490.1041666666667, 722.7822580645162, 392.7083333333333, 725.0, 495.8333333333333, 725.0, 407.03124999999994], [725.0, 407.03124999999994, 711.6935483870968, 303.90625000000006, 725.0, 404.1666666666667, 713.9112903225807, 315.3645833333333], [713.9112903225807, 315.3645833333333, 691.733870967742, 226.5625, 713.9112903225807, 306.7708333333333, 696.1693548387098, 232.29166666666669], [696.1693548387098, 232.29166666666669, 673.991935483871, 180.72916666666669, 700.6048387096774, 238.02083333333331, 676.2096774193549, 180.72916666666669], [676.2096774193549, 180.72916666666669, 631.8548387096774, 100.52083333333337, 669.5564516129033, 166.40625, 636.2903225806452, 109.11458333333337], [636.2903225806452, 109.11458333333337, 607.4596774193549, 74.73958333333337, 640.7258064516129, 114.84375, 609.6774193548388, 74.73958333333337], [609.6774193548388, 74.73958333333337, 560.8870967741937, 26.041666666666686, 616.3306451612904, 80.46875, 567.5403225806452, 31.77083333333337], [567.5403225806452, 31.77083333333337, 512.0967741935484, -2.6041666666666288, 565.3225806451613, 31.77083333333337, 509.8790322580645, -2.6041666666666288], [509.8790322580645, -2.6041666666666288, 445.5645161290323, -25.520833333333286, 516.5322580645162, 3.1250000000000284, 445.5645161290323, -25.520833333333286], [445.5645161290323, -25.520833333333286, 365.7258064516129, -34.114583333333286, 423.38709677419365, -28.38541666666663, 365.7258064516129, -28.38541666666663], [365.7258064516129, -28.38541666666663, 279.23387096774195, -16.927083333333286, 365.7258064516129, -34.114583333333286, 292.54032258064524, -19.79166666666663], [292.54032258064524, -19.79166666666663, 234.8790322580645, 0.2604166666666856, 285.88709677419365, -22.65624999999997, 228.22580645161293, 3.1250000000000284], [228.22580645161293, 3.1250000000000284, 166.12903225806457, 54.6875, 221.57258064516134, 8.854166666666686, 166.12903225806457, 54.6875], [166.12903225806457, 54.6875, 117.33870967741939, 114.84375, 163.91129032258067, 54.6875, 112.90322580645164, 120.57291666666669], [112.90322580645164, 120.57291666666669, 79.6370967741936, 195.05208333333337, 119.55645161290329, 111.97916666666669, 72.983870967742, 217.96875], [72.983870967742, 217.96875, 48.58870967741939, 335.4166666666667, 77.41935483870975, 206.51041666666669, 50.80645161290329, 306.7708333333333], [50.80645161290329, 306.7708333333333, 37.50000000000006, 432.81249999999994, 48.58870967741939, 321.09374999999994, 41.9354838709678, 421.3541666666667], [41.9354838709678, 421.3541666666667, 41.9354838709678, 530.2083333333333, 41.9354838709678, 449.99999999999994, 46.370967741935544, 555.9895833333333], [137.29838709677426, 441.40624999999994, 139.5161290322581, 507.2916666666667, 139.5161290322581, 432.81249999999994, 137.29838709677426, 501.56249999999994], [137.29838709677426, 501.56249999999994, 157.25806451612908, 619.0104166666667, 137.29838709677426, 504.4270833333333, 155.04032258064518, 607.5520833333333], [155.04032258064518, 607.5520833333333, 199.39516129032262, 713.5416666666665, 155.04032258064518, 621.875, 206.04838709677426, 719.2708333333333], [206.04838709677426, 719.2708333333333, 265.9274193548388, 793.75, 206.04838709677426, 727.8645833333333, 274.79838709677426, 790.8854166666665], [274.79838709677426, 790.8854166666665, 350.20161290322585, 822.3958333333333, 270.36290322580646, 788.0208333333333, 356.85483870967744, 822.3958333333333], [356.85483870967744, 822.3958333333333, 458.8709677419355, 813.8020833333333, 361.29032258064524, 828.125, 467.741935483871, 808.0729166666665], [467.741935483871, 808.0729166666665, 552.0161290322582, 745.0520833333333, 465.5241935483872, 810.9375, 556.4516129032259, 733.59375], [556.4516129032259, 733.59375, 591.9354838709678, 673.4375, 565.3225806451613, 725.0, 600.8064516129033, 664.84375], [600.8064516129033, 667.7083333333333, 622.983870967742, 573.1770833333333, 600.8064516129033, 656.25, 618.5483870967743, 584.6354166666667], [618.5483870967743, 584.6354166666667, 625.2016129032259, 452.8645833333333, 620.7661290322582, 573.1770833333333, 636.2903225806452, 438.5416666666667], [636.2903225806452, 438.5416666666667, 616.3306451612904, 321.09374999999994, 629.6370967741937, 447.1354166666667, 618.5483870967743, 326.8229166666667], [618.5483870967743, 326.8229166666667, 589.7177419354839, 223.69791666666669, 616.3306451612904, 326.8229166666667, 594.1532258064517, 243.75], [594.1532258064517, 243.75, 547.5806451612904, 149.21875, 591.9354838709678, 249.47916666666669, 545.3629032258065, 152.08333333333337], [545.3629032258065, 152.08333333333337, 469.9596774193549, 94.79166666666669, 560.8870967741937, 186.45833333333337, 483.26612903225816, 106.25], [483.26612903225816, 106.25, 403.4274193548388, 83.33333333333337, 498.79032258064524, 111.97916666666669, 418.95161290322585, 80.46875], [418.95161290322585, 80.46875, 325.8064516129033, 89.0625, 396.7741935483872, 83.33333333333337, 319.1532258064517, 94.79166666666669], [319.1532258064517, 94.79166666666669, 226.00806451612908, 146.35416666666669, 319.1532258064517, 89.0625, 226.00806451612908, 137.76041666666669], [226.00806451612908, 137.76041666666669, 168.3467741935484, 258.0729166666667, 228.22580645161293, 137.76041666666669, 163.91129032258067, 255.20833333333331], [163.91129032258067, 255.20833333333331, 141.733870967742, 358.3333333333333, 168.3467741935484, 255.20833333333331, 132.86290322580652, 384.1145833333333], [132.86290322580652, 384.1145833333333, 137.29838709677426, 495.8333333333333, 137.29838709677426, 369.7916666666667, 137.29838709677426, 490.1041666666667], [627.4193548387098, 91.92708333333337, 722.7822580645162, -2.6041666666666288, 625.2016129032259, 94.79166666666669, 722.7822580645162, -2.6041666666666288], [722.7822580645162, -2.6041666666666288, 673.991935483871, -77.08333333333329, 720.5645161290323, 0.2604166666666856, 673.991935483871, -77.08333333333329], [673.991935483871, -77.08333333333329, 580.8467741935484, 11.718750000000028, 669.5564516129033, -77.08333333333329, 591.9354838709678, 0.2604166666666856], [591.9354838709678, 0.2604166666666856, 563.1048387096774, 31.77083333333337, 600.8064516129033, -8.333333333333314, 563.1048387096774, 28.906250000000057], [563.1048387096774, 28.906250000000057, 600.8064516129033, 71.875, 565.3225806451613, 34.635416666666686, 596.3709677419355, 63.28125], [596.3709677419355, 63.28125, 622.983870967742, 91.92708333333337, 594.1532258064517, 60.416666666666686, 627.4193548387098, 94.79166666666669]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)
    y_shift += 20
    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def R(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[84.07258064516134, -5.468749999999972, 84.07258064516134, 908.3333333333333, 81.85483870967744, -2.6041666666666288, 84.07258064516134, 908.3333333333333], [84.07258064516134, 908.3333333333333, 416.73387096774195, 914.0624999999998, 84.07258064516134, 911.1979166666665, 412.29838709677426, 908.3333333333333], [412.29838709677426, 908.3333333333333, 472.1774193548388, 894.0104166666665, 412.29838709677426, 905.4687499999998, 501.00806451612914, 888.2812499999998], [501.00806451612914, 888.2812499999998, 558.6693548387098, 836.71875, 489.91935483870975, 891.1458333333333, 560.8870967741937, 833.8541666666665], [560.8870967741937, 833.8541666666665, 605.241935483871, 733.59375, 556.4516129032259, 839.5833333333333, 605.241935483871, 736.4583333333333], [605.241935483871, 736.4583333333333, 614.1129032258065, 621.875, 609.6774193548388, 722.1354166666665, 609.6774193548388, 607.5520833333333], [609.6774193548388, 607.5520833333333, 587.5, 504.4270833333333, 611.8951612903227, 604.6875, 585.2822580645162, 507.2916666666667], [585.2822580645162, 507.2916666666667, 554.233870967742, 449.99999999999994, 585.2822580645162, 504.4270833333333, 558.6693548387098, 458.59374999999994], [558.6693548387098, 458.59374999999994, 496.57258064516134, 395.5729166666667, 567.5403225806452, 464.3229166666667, 507.6612903225807, 407.03124999999994], [507.6612903225807, 407.03124999999994, 436.6935483870968, 378.3854166666667, 503.2258064516129, 404.1666666666667, 441.1290322580645, 386.9791666666667], [441.1290322580645, 386.9791666666667, 398.991935483871, 381.24999999999994, 438.9112903225807, 381.24999999999994, 398.991935483871, 381.24999999999994], [398.991935483871, 381.24999999999994, 181.65322580645164, 384.1145833333333, 416.73387096774195, 384.1145833333333, 181.65322580645164, 381.24999999999994], [181.65322580645164, 381.24999999999994, 181.65322580645164, -2.6041666666666288, 181.65322580645164, 378.3854166666667, 179.4354838709678, 3.1250000000000284], [179.4354838709678, 3.1250000000000284, 79.6370967741936, -2.6041666666666288, 175.00000000000006, -2.6041666666666288, 81.85483870967744, -2.6041666666666288], [177.2177419354839, 484.37499999999994, 183.87096774193554, 802.34375, 181.65322580645164, 487.2395833333333, 183.87096774193554, 799.4791666666665], [183.87096774193554, 799.4791666666665, 383.4677419354839, 808.0729166666665, 179.4354838709678, 802.34375, 401.2096774193549, 802.34375], [401.2096774193549, 802.34375, 454.4354838709678, 785.15625, 405.6451612903227, 799.4791666666665, 463.3064516129033, 767.96875], [463.3064516129033, 767.96875, 505.4435483870968, 713.5416666666665, 465.5241935483872, 782.2916666666665, 507.6612903225807, 704.9479166666665], [507.6612903225807, 704.9479166666665, 509.8790322580645, 619.0104166666667, 509.8790322580645, 702.0833333333333, 509.8790322580645, 613.28125], [509.8790322580645, 613.28125, 489.91935483870975, 535.9375, 516.5322580645162, 627.6041666666667, 492.13709677419365, 538.8020833333333], [492.13709677419365, 538.8020833333333, 441.1290322580645, 495.8333333333333, 489.91935483870975, 544.53125, 438.9112903225807, 495.8333333333333], [438.9112903225807, 495.8333333333333, 376.8145161290323, 484.37499999999994, 432.25806451612914, 498.6979166666667, 376.8145161290323, 492.96874999999994], [376.8145161290323, 492.96874999999994, 179.4354838709678, 492.96874999999994, 385.6854838709678, 492.96874999999994, 177.2177419354839, 495.8333333333333], [549.7983870967743, 441.40624999999994, 580.8467741935484, 418.4895833333333, 547.5806451612904, 444.2708333333333, 587.5, 418.4895833333333], [587.5, 418.4895833333333, 614.1129032258065, 384.1145833333333, 585.2822580645162, 421.3541666666667, 614.1129032258065, 384.1145833333333], [614.1129032258065, 384.1145833333333, 629.6370967741937, 321.09374999999994, 609.6774193548388, 392.7083333333333, 634.0725806451613, 323.9583333333333], [634.0725806451613, 323.9583333333333, 631.8548387096774, 229.42708333333331, 627.4193548387098, 335.4166666666667, 636.2903225806452, 209.375], [636.2903225806452, 209.375, 638.5080645161291, 100.52083333333337, 636.2903225806452, 232.29166666666669, 638.5080645161291, 126.30208333333337], [638.5080645161291, 126.30208333333337, 640.7258064516129, 77.60416666666669, 634.0725806451613, 146.35416666666669, 642.9435483870968, 69.01041666666669], [642.9435483870968, 69.01041666666669, 651.8145161290323, 46.09375, 640.7258064516129, 74.73958333333337, 658.4677419354839, 31.77083333333337], [658.4677419354839, 31.77083333333337, 671.7741935483872, 17.447916666666686, 651.8145161290323, 46.09375, 673.991935483871, 20.312500000000057], [673.991935483871, 20.312500000000057, 673.991935483871, -2.6041666666666288, 673.991935483871, 20.312500000000057, 673.991935483871, -2.6041666666666288], [673.991935483871, -2.6041666666666288, 556.4516129032259, -5.468749999999972, 673.991935483871, -5.468749999999972, 556.4516129032259, -5.468749999999972], [556.4516129032259, -5.468749999999972, 552.0161290322582, 14.583333333333371, 556.4516129032259, -2.6041666666666288, 549.7983870967743, 14.583333333333371], [549.7983870967743, 14.583333333333371, 543.1451612903227, 60.416666666666686, 549.7983870967743, 26.041666666666686, 547.5806451612904, 57.55208333333337], [547.5806451612904, 57.55208333333337, 536.491935483871, 252.34375, 547.5806451612904, 43.229166666666686, 540.9274193548388, 226.5625], [540.9274193548388, 226.5625, 536.491935483871, 298.1770833333333, 538.7096774193549, 220.83333333333331, 532.0564516129033, 295.31250000000006], [532.0564516129033, 295.31250000000006, 507.6612903225807, 349.7395833333333, 534.2741935483872, 289.5833333333333, 514.3145161290323, 338.28124999999994], [514.3145161290323, 338.28124999999994, 487.70161290322585, 369.7916666666667, 518.75, 335.4166666666667, 489.91935483870975, 369.7916666666667], [489.91935483870975, 369.7916666666667, 447.7822580645162, 386.9791666666667, 501.00806451612914, 358.3333333333333, 458.8709677419355, 384.1145833333333], [458.8709677419355, 384.1145833333333, 405.6451612903227, 389.84374999999994, 461.0887096774194, 378.3854166666667, 414.51612903225816, 386.9791666666667]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)
    x_shift -= 40
    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def S(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[46.370967741935544, 295.31250000000006, 137.29838709677426, 289.5833333333333, 41.9354838709678, 292.4479166666667, 135.08064516129036, 295.31250000000006], [135.08064516129036, 295.31250000000006, 146.16935483870975, 220.83333333333331, 137.29838709677426, 292.4479166666667, 150.60483870967744, 209.375], [150.60483870967744, 209.375, 183.87096774193554, 146.35416666666669, 143.95161290322585, 215.10416666666669, 188.3064516129033, 134.89583333333337], [188.3064516129033, 134.89583333333337, 245.9677419354839, 86.19791666666669, 181.65322580645164, 132.03125, 243.75, 94.79166666666669], [243.75, 94.79166666666669, 323.5887096774194, 74.73958333333337, 234.8790322580645, 100.52083333333337, 308.0645161290323, 77.60416666666669], [308.0645161290323, 77.60416666666669, 398.991935483871, 86.19791666666669, 299.1935483870968, 77.60416666666669, 394.5564516129033, 89.0625], [394.5564516129033, 89.0625, 474.3951612903227, 123.4375, 410.08064516129036, 86.19791666666669, 476.61290322580646, 120.57291666666669], [476.61290322580646, 120.57291666666669, 509.8790322580645, 180.72916666666669, 476.61290322580646, 120.57291666666669, 514.3145161290323, 186.45833333333337], [514.3145161290323, 186.45833333333337, 520.9677419354839, 238.02083333333331, 507.6612903225807, 175.0, 516.5322580645162, 229.42708333333331], [516.5322580645162, 229.42708333333331, 507.6612903225807, 295.31250000000006, 520.9677419354839, 226.5625, 509.8790322580645, 292.4479166666667], [509.8790322580645, 292.4479166666667, 445.5645161290323, 358.3333333333333, 501.00806451612914, 306.7708333333333, 450.0, 361.1979166666667], [450.0, 361.1979166666667, 359.07258064516134, 395.5729166666667, 438.9112903225807, 364.06249999999994, 379.0322580645162, 392.7083333333333], [379.0322580645162, 392.7083333333333, 248.1854838709678, 424.21874999999994, 356.85483870967744, 395.5729166666667, 252.6209677419355, 427.0833333333333], [252.6209677419355, 427.0833333333333, 150.60483870967744, 464.3229166666667, 263.7096774193549, 424.21874999999994, 168.3467741935484, 455.7291666666667], [168.3467741935484, 455.7291666666667, 95.16129032258067, 524.4791666666667, 199.39516129032262, 447.1354166666667, 126.20967741935488, 490.1041666666667], [126.20967741935488, 490.1041666666667, 95.16129032258067, 538.8020833333333, 135.08064516129036, 481.5104166666667, 99.59677419354841, 527.34375], [99.59677419354841, 527.34375, 77.41935483870975, 596.09375, 104.03225806451616, 527.34375, 79.6370967741936, 584.6354166666667], [79.6370967741936, 584.6354166666667, 72.983870967742, 653.3854166666667, 81.85483870967744, 570.3125, 72.983870967742, 673.4375], [72.983870967742, 673.4375, 81.85483870967744, 739.3229166666665, 72.983870967742, 659.1145833333333, 84.07258064516134, 730.7291666666665], [84.07258064516134, 730.7291666666665, 99.59677419354841, 793.75, 81.85483870967744, 713.5416666666665, 99.59677419354841, 788.0208333333333], [99.59677419354841, 788.0208333333333, 135.08064516129036, 848.1770833333333, 95.16129032258067, 776.5625, 135.08064516129036, 848.1770833333333], [135.08064516129036, 848.1770833333333, 172.78225806451616, 891.1458333333333, 130.64516129032262, 842.4479166666665, 181.65322580645164, 896.8749999999998], [181.65322580645164, 896.8749999999998, 254.8387096774194, 934.1145833333333, 179.4354838709678, 902.6041666666665, 263.7096774193549, 934.1145833333333], [263.7096774193549, 934.1145833333333, 345.76612903225816, 922.6562499999998, 272.58064516129036, 925.5208333333333, 367.9435483870968, 928.3854166666665], [367.9435483870968, 928.3854166666665, 445.5645161290323, 905.4687499999998, 370.1612903225807, 928.3854166666665, 432.25806451612914, 914.0624999999998], [432.25806451612914, 914.0624999999998, 487.70161290322585, 873.9583333333333, 432.25806451612914, 914.0624999999998, 489.91935483870975, 876.8229166666665], [489.91935483870975, 876.8229166666665, 547.5806451612904, 828.125, 492.13709677419365, 885.4166666666665, 545.3629032258065, 822.3958333333333], [545.3629032258065, 822.3958333333333, 578.6290322580645, 750.78125, 540.9274193548388, 825.2604166666665, 571.9758064516129, 767.96875], [571.9758064516129, 767.96875, 587.5, 702.0833333333333, 571.9758064516129, 767.96875, 589.7177419354839, 702.0833333333333], [589.7177419354839, 702.0833333333333, 591.9354838709678, 641.9270833333333, 585.2822580645162, 716.40625, 591.9354838709678, 641.9270833333333], [591.9354838709678, 641.9270833333333, 498.79032258064524, 641.9270833333333, 589.7177419354839, 639.0625, 498.79032258064524, 644.7916666666667], [498.79032258064524, 644.7916666666667, 489.91935483870975, 704.9479166666665, 501.00806451612914, 641.9270833333333, 494.35483870967744, 704.9479166666665], [494.35483870967744, 704.9479166666665, 450.0, 773.6979166666665, 489.91935483870975, 707.8125, 450.0, 782.2916666666665], [450.0, 782.2916666666665, 396.7741935483872, 816.6666666666665, 438.9112903225807, 785.15625, 398.991935483871, 808.0729166666665], [398.991935483871, 810.9375, 328.0241935483872, 828.125, 398.991935483871, 808.0729166666665, 343.54838709677426, 825.2604166666665], [343.54838709677426, 825.2604166666665, 277.01612903225816, 822.3958333333333, 334.6774193548388, 825.2604166666665, 285.88709677419365, 825.2604166666665], [285.88709677419365, 825.2604166666665, 221.57258064516134, 799.4791666666665, 281.45161290322585, 816.6666666666665, 228.22580645161293, 805.2083333333333], [228.22580645161293, 805.2083333333333, 197.17741935483878, 776.5625, 239.3145161290323, 805.2083333333333, 194.95967741935488, 770.8333333333333], [194.95967741935488, 770.8333333333333, 166.12903225806457, 702.0833333333333, 194.95967741935488, 765.1041666666665, 157.25806451612908, 684.8958333333333], [157.25806451612908, 684.8958333333333, 175.00000000000006, 619.0104166666667, 163.91129032258067, 682.03125, 177.2177419354839, 621.875], [177.2177419354839, 621.875, 221.57258064516134, 573.1770833333333, 163.91129032258067, 607.5520833333333, 223.79032258064518, 564.5833333333333], [223.79032258064518, 564.5833333333333, 292.54032258064524, 541.6666666666667, 228.22580645161293, 558.8541666666667, 285.88709677419365, 541.6666666666667], [285.88709677419365, 541.6666666666667, 367.9435483870968, 518.75, 299.1935483870968, 535.9375, 381.25, 513.0208333333333], [381.25, 513.0208333333333, 489.91935483870975, 472.9166666666667, 385.6854838709678, 507.2916666666667, 478.83064516129036, 481.5104166666667], [478.83064516129036, 481.5104166666667, 543.1451612903227, 447.1354166666667, 476.61290322580646, 478.6458333333333, 536.491935483871, 449.99999999999994], [536.491935483871, 449.99999999999994, 578.6290322580645, 395.5729166666667, 529.8387096774194, 449.99999999999994, 587.5, 381.24999999999994], [587.5, 381.24999999999994, 609.6774193548388, 309.6354166666667, 596.3709677419355, 364.06249999999994, 605.241935483871, 306.7708333333333], [605.241935483871, 306.7708333333333, 607.4596774193549, 209.375, 607.4596774193549, 295.31250000000006, 611.8951612903227, 203.64583333333337], [611.8951612903227, 203.64583333333337, 587.5, 109.11458333333337, 611.8951612903227, 195.05208333333337, 587.5, 117.70833333333337], [587.5, 117.70833333333337, 545.3629032258065, 48.95833333333337, 591.9354838709678, 126.30208333333337, 558.6693548387098, 66.14583333333337], [558.6693548387098, 66.14583333333337, 476.61290322580646, 3.1250000000000284, 563.1048387096774, 63.28125, 505.4435483870968, 11.718750000000028], [505.4435483870968, 11.718750000000028, 376.8145161290323, -22.65624999999997, 501.00806451612914, 17.447916666666686, 414.51612903225816, -16.927083333333286], [414.51612903225816, -16.927083333333286, 301.4112903225807, -25.520833333333286, 405.6451612903227, -16.927083333333286, 328.0241935483872, -25.520833333333286], [325.8064516129033, -25.520833333333286, 208.2661290322581, -8.333333333333314, 323.5887096774194, -34.114583333333286, 221.57258064516134, -19.79166666666663], [221.57258064516134, -19.79166666666663, 135.08064516129036, 46.09375, 217.1370967741936, -8.333333333333314, 132.86290322580652, 40.36458333333337], [132.86290322580652, 40.36458333333337, 81.85483870967744, 120.57291666666669, 135.08064516129036, 43.229166666666686, 88.50806451612908, 106.25], [88.50806451612908, 106.25, 61.89516129032262, 183.59375, 99.59677419354841, 86.19791666666669, 64.11290322580652, 169.27083333333337], [64.11290322580652, 169.27083333333337, 48.58870967741939, 249.47916666666669, 66.33064516129036, 160.67708333333337, 48.58870967741939, 266.6666666666667], [48.58870967741939, 266.6666666666667, 48.58870967741939, 286.71875000000006, 53.02419354838713, 215.10416666666669, 48.58870967741939, 283.8541666666667]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def T(x_shift=0, y_shift=0, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one."""
    coords = [[13.104838709677438, 805.2083333333333, 13.104838709677438, 911.1979166666665, 13.104838709677438, 796.6145833333333, 15.322580645161338, 908.3333333333333], [15.322580645161338, 908.3333333333333, 585.2822580645162, 908.3333333333333, 10.887096774193594, 914.0624999999998, 585.2822580645162, 911.1979166666665], [585.2822580645162, 911.1979166666665, 585.2822580645162, 799.4791666666665, 587.5, 905.4687499999998, 589.7177419354839, 796.6145833333333], [589.7177419354839, 796.6145833333333, 350.20161290322585, 799.4791666666665, 591.9354838709678, 799.4791666666665, 354.63709677419365, 802.34375], [354.63709677419365, 802.34375, 352.41935483870975, -5.468749999999972, 352.41935483870975, 799.4791666666665, 352.41935483870975, 5.989583333333371], [352.41935483870975, 5.989583333333371, 252.6209677419355, 11.718750000000028, 347.98387096774195, 11.718750000000028, 254.8387096774194, 5.989583333333371], [254.8387096774194, 5.989583333333371, 250.4032258064517, 799.4791666666665, 252.6209677419355, 5.989583333333371, 252.6209677419355, 796.6145833333333], [252.6209677419355, 796.6145833333333, 15.322580645161338, 805.2083333333333, 254.8387096774194, 799.4791666666665, 15.322580645161338, 799.4791666666665]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def U(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[79.6370967741936, 902.6041666666665, 179.4354838709678, 905.4687499999998, 79.6370967741936, 911.1979166666665, 177.2177419354839, 908.3333333333333], [177.2177419354839, 908.3333333333333, 179.4354838709678, 321.09374999999994, 179.4354838709678, 908.3333333333333, 177.2177419354839, 321.09374999999994], [177.2177419354839, 321.09374999999994, 192.74193548387103, 226.5625, 181.65322580645164, 303.90625000000006, 192.74193548387103, 220.83333333333331], [192.74193548387103, 220.83333333333331, 221.57258064516134, 160.67708333333337, 190.52419354838713, 223.69791666666669, 221.57258064516134, 146.35416666666669], [221.57258064516134, 146.35416666666669, 270.36290322580646, 103.38541666666669, 214.91935483870975, 152.08333333333337, 272.58064516129036, 97.65625], [272.58064516129036, 97.65625, 339.11290322580646, 89.0625, 265.9274193548388, 109.11458333333337, 334.6774193548388, 83.33333333333337], [334.6774193548388, 83.33333333333337, 414.51612903225816, 86.19791666666669, 325.8064516129033, 77.60416666666669, 412.29838709677426, 86.19791666666669], [412.29838709677426, 86.19791666666669, 478.83064516129036, 126.30208333333337, 410.08064516129036, 91.92708333333337, 472.1774193548388, 126.30208333333337], [472.1774193548388, 126.30208333333337, 518.75, 195.05208333333337, 474.3951612903227, 132.03125, 518.75, 189.32291666666669], [518.75, 189.32291666666669, 543.1451612903227, 295.31250000000006, 505.4435483870968, 180.72916666666669, 540.9274193548388, 292.4479166666667], [540.9274193548388, 292.4479166666667, 540.9274193548388, 292.4479166666667, 543.1451612903227, 341.1458333333333, 538.7096774193549, 278.12500000000006], [538.7096774193549, 326.8229166666667, 538.7096774193549, 326.8229166666667, 538.7096774193549, 326.8229166666667, 540.9274193548388, 905.4687499999998], [540.9274193548388, 301.0416666666667, 540.9274193548388, 908.3333333333333, 540.9274193548388, 908.3333333333333, 640.7258064516129, 905.4687499999998], [540.9274193548388, 902.6041666666665, 638.5080645161291, 905.4687499999998, 638.5080645161291, 905.4687499999998, 638.5080645161291, 344.0104166666667], [638.5080645161291, 908.3333333333333, 638.5080645161291, 318.2291666666667, 638.5080645161291, 318.2291666666667, 638.5080645161291, 318.2291666666667], [618.5483870967743, 192.1875, 638.5080645161291, 312.50000000000006, 620.7661290322582, 206.51041666666669, 620.7661290322582, 206.51041666666669], [600.8064516129033, 132.03125, 629.6370967741937, 232.29166666666669, 609.6774193548388, 157.8125, 609.6774193548388, 157.8125], [576.4112903225807, 83.33333333333337, 609.6774193548388, 152.08333333333337, 578.6290322580645, 86.19791666666669, 578.6290322580645, 86.19791666666669], [529.8387096774194, 26.041666666666686, 585.2822580645162, 97.65625, 532.0564516129033, 28.906250000000057, 532.0564516129033, 28.906250000000057], [472.1774193548388, -2.6041666666666288, 547.5806451612904, 48.95833333333337, 483.26612903225816, -2.6041666666666288, 483.26612903225816, -2.6041666666666288], [423.38709677419365, -22.65624999999997, 492.13709677419365, 5.989583333333371, 432.25806451612914, -19.79166666666663, 432.25806451612914, -19.79166666666663], [367.9435483870968, -28.38541666666663, 441.1290322580645, -14.062499999999972, 365.7258064516129, -34.114583333333286, 365.7258064516129, -34.114583333333286], [365.7258064516129, -34.114583333333286, 272.58064516129036, -14.062499999999972, 363.508064516129, -25.520833333333286, 268.1451612903227, -11.197916666666629], [268.1451612903227, -11.197916666666629, 201.61290322580652, 17.447916666666686, 283.66935483870975, -19.79166666666663, 212.70161290322585, 5.989583333333371], [212.70161290322585, 5.989583333333371, 212.70161290322585, 5.989583333333371, 128.42741935483878, 94.79166666666669, 219.35483870967744, 8.854166666666686], [139.5161290322581, 86.19791666666669, 139.5161290322581, 86.19791666666669, 101.81451612903231, 186.45833333333337, 146.16935483870975, 77.60416666666669], [106.25000000000006, 172.13541666666669, 106.25000000000006, 172.13541666666669, 106.25000000000006, 172.13541666666669, 81.85483870967744, 318.2291666666667], [110.6854838709678, 154.94791666666669, 86.29032258064518, 278.12500000000006, 86.29032258064518, 278.12500000000006, 84.07258064516134, 389.84374999999994], [86.29032258064518, 278.12500000000006, 86.29032258064518, 384.1145833333333, 79.6370967741936, 364.06249999999994, 77.41935483870975, 911.1979166666665]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def V(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[24.193548387096826, 908.3333333333333, 128.42741935483878, 908.3333333333333, 19.75806451612908, 908.3333333333333, 130.64516129032262, 905.4687499999998], [130.64516129032262, 905.4687499999998, 332.4596774193549, 132.03125, 130.64516129032262, 914.0624999999998, 334.6774193548388, 134.89583333333337], [334.6774193548388, 134.89583333333337, 532.0564516129033, 908.3333333333333, 332.4596774193549, 129.16666666666669, 534.2741935483872, 911.1979166666665], [534.2741935483872, 911.1979166666665, 640.7258064516129, 908.3333333333333, 536.491935483871, 911.1979166666665, 642.9435483870968, 908.3333333333333], [642.9435483870968, 908.3333333333333, 385.6854838709678, -2.6041666666666288, 640.7258064516129, 908.3333333333333, 383.4677419354839, -2.6041666666666288], [383.4677419354839, -2.6041666666666288, 281.45161290322585, -5.468749999999972, 383.4677419354839, -2.6041666666666288, 279.23387096774195, -2.6041666666666288], [279.23387096774195, -2.6041666666666288, 24.193548387096826, 914.0624999999998, 285.88709677419365, -5.468749999999972, 26.41129032258067, 908.3333333333333]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def W(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[17.54032258064518, 908.3333333333333, 121.77419354838713, 908.3333333333333, 19.75806451612908, 908.3333333333333, 121.77419354838713, 905.4687499999998], [121.77419354838713, 905.4687499999998, 257.0564516129033, 166.40625, 123.99193548387103, 911.1979166666665, 250.4032258064517, 166.40625], [250.4032258064517, 166.40625, 414.51612903225816, 914.0624999999998, 252.6209677419355, 157.8125, 412.29838709677426, 908.3333333333333], [412.29838709677426, 908.3333333333333, 520.9677419354839, 908.3333333333333, 412.29838709677426, 908.3333333333333, 516.5322580645162, 905.4687499999998], [520.9677419354839, 905.4687499999998, 678.4274193548388, 166.40625, 516.5322580645162, 916.9270833333333, 676.2096774193549, 169.27083333333337], [676.2096774193549, 169.27083333333337, 809.2741935483872, 914.0624999999998, 678.4274193548388, 166.40625, 813.709677419355, 911.1979166666665], [813.709677419355, 911.1979166666665, 917.9435483870969, 911.1979166666665, 804.8387096774194, 902.6041666666665, 915.725806451613, 905.4687499999998], [915.725806451613, 905.4687499999998, 731.6532258064517, 0.2604166666666856, 913.5080645161291, 908.3333333333333, 731.6532258064517, -5.468749999999972], [731.6532258064517, -5.468749999999972, 631.8548387096774, -2.6041666666666288, 727.2177419354839, -2.6041666666666288, 625.2016129032259, 0.2604166666666856], [625.2016129032259, 0.2604166666666856, 467.741935483871, 750.78125, 629.6370967741937, 0.2604166666666856, 465.5241935483872, 747.9166666666665], [465.5241935483872, 747.9166666666665, 301.4112903225807, -2.6041666666666288, 465.5241935483872, 750.78125, 301.4112903225807, 0.2604166666666856], [301.4112903225807, 0.2604166666666856, 199.39516129032262, -2.6041666666666288, 305.8467741935484, -2.6041666666666288, 194.95967741935488, -2.6041666666666288], [194.95967741935488, -2.6041666666666288, 17.54032258064518, 905.4687499999998, 201.61290322580652, -5.468749999999972, 17.54032258064518, 911.1979166666665]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def X(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[35.28225806451616, 908.3333333333333, 155.04032258064518, 908.3333333333333, 35.28225806451616, 911.1979166666665, 152.82258064516134, 914.0624999999998], [152.82258064516134, 914.0624999999998, 334.6774193548388, 558.8541666666667, 155.04032258064518, 908.3333333333333, 334.6774193548388, 555.9895833333333], [334.6774193548388, 555.9895833333333, 509.8790322580645, 914.0624999999998, 334.6774193548388, 561.71875, 514.3145161290323, 911.1979166666665], [514.3145161290323, 911.1979166666665, 629.6370967741937, 908.3333333333333, 512.0967741935484, 914.0624999999998, 627.4193548387098, 908.3333333333333], [627.4193548387098, 908.3333333333333, 392.3387096774194, 461.4583333333333, 629.6370967741937, 908.3333333333333, 390.1209677419355, 464.3229166666667], [390.1209677419355, 464.3229166666667, 638.5080645161291, -2.6041666666666288, 392.3387096774194, 467.18749999999994, 642.9435483870968, -2.6041666666666288], [642.9435483870968, -2.6041666666666288, 520.9677419354839, -8.333333333333314, 640.7258064516129, -5.468749999999972, 518.75, -2.6041666666666288], [518.75, -2.6041666666666288, 330.241935483871, 372.65624999999994, 523.1854838709678, -5.468749999999972, 334.6774193548388, 369.7916666666667], [334.6774193548388, 369.7916666666667, 132.86290322580652, -8.333333333333314, 332.4596774193549, 369.7916666666667, 137.29838709677426, -2.6041666666666288], [137.29838709677426, -2.6041666666666288, 19.75806451612908, -2.6041666666666288, 137.29838709677426, -2.6041666666666288, 19.75806451612908, -5.468749999999972], [19.75806451612908, -5.468749999999972, 272.58064516129036, 461.4583333333333, 19.75806451612908, -5.468749999999972, 270.36290322580646, 461.4583333333333], [270.36290322580646, 461.4583333333333, 39.7177419354839, 908.3333333333333, 274.79838709677426, 464.3229166666667, 35.28225806451616, 905.4687499999998]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def Y(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[17.54032258064518, 911.1979166666665, 135.08064516129036, 908.3333333333333, 19.75806451612908, 911.1979166666665, 130.64516129032262, 908.3333333333333], [130.64516129032262, 908.3333333333333, 334.6774193548388, 467.18749999999994, 130.64516129032262, 905.4687499999998, 334.6774193548388, 470.0520833333333], [334.6774193548388, 470.0520833333333, 532.0564516129033, 914.0624999999998, 334.6774193548388, 467.18749999999994, 536.491935483871, 911.1979166666665], [536.491935483871, 911.1979166666665, 649.5967741935484, 911.1979166666665, 532.0564516129033, 911.1979166666665, 647.3790322580645, 908.3333333333333], [647.3790322580645, 908.3333333333333, 381.25, 364.06249999999994, 647.3790322580645, 905.4687499999998, 383.4677419354839, 369.7916666666667], [383.4677419354839, 369.7916666666667, 383.4677419354839, -2.6041666666666288, 381.25, 361.1979166666667, 383.4677419354839, 3.1250000000000284], [383.4677419354839, 3.1250000000000284, 288.10483870967744, -2.6041666666666288, 381.25, 0.2604166666666856, 281.45161290322585, -5.468749999999972], [281.45161290322585, -5.468749999999972, 285.88709677419365, 358.3333333333333, 283.66935483870975, 3.1250000000000284, 283.66935483870975, 364.06249999999994], [283.66935483870975, 364.06249999999994, 19.75806451612908, 911.1979166666665, 288.10483870967744, 361.1979166666667, 21.975806451612925, 905.4687499999998]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)

def Z(x_shift=None, y_shift=None, x_scale=1, y_scale=1):
    """Prepare the Latex for a T, but also return the end character so we know where so start the next one.
    Recall that it goes [x1,y1,x2,y2,x3,y3,x4,y4], so each Bezier curve is a list inside coords.
    Also that the numbers are input as integers"""
    coords = [[53.02419354838713, 802.34375, 50.80645161290329, 911.1979166666665, 53.02419354838713, 805.2083333333333, 53.02419354838713, 908.3333333333333], [53.02419354838713, 908.3333333333333, 578.6290322580645, 905.4687499999998, 53.02419354838713, 905.4687499999998, 578.6290322580645, 902.6041666666665], [578.6290322580645, 902.6041666666665, 580.8467741935484, 808.0729166666665, 576.4112903225807, 911.1979166666665, 583.0645161290323, 808.0729166666665], [583.0645161290323, 808.0729166666665, 143.95161290322585, 111.97916666666669, 576.4112903225807, 808.0729166666665, 143.95161290322585, 109.11458333333337], [143.95161290322585, 109.11458333333337, 578.6290322580645, 109.11458333333337, 141.733870967742, 100.52083333333337, 576.4112903225807, 103.38541666666669], [576.4112903225807, 103.38541666666669, 574.1935483870968, -2.6041666666666288, 576.4112903225807, 97.65625, 574.1935483870968, -2.6041666666666288], [574.1935483870968, -2.6041666666666288, 19.75806451612908, -5.468749999999972, 578.6290322580645, -5.468749999999972, 21.975806451612925, -2.6041666666666288], [21.975806451612925, -2.6041666666666288, 17.54032258064518, 97.65625, 19.75806451612908, 3.1250000000000284, 21.975806451612925, 94.79166666666669], [21.975806451612925, 94.79166666666669, 454.4354838709678, 793.75, 21.975806451612925, 100.52083333333337, 454.4354838709678, 796.6145833333333], [454.4354838709678, 796.6145833333333, 55.24193548387103, 799.4791666666665, 450.0, 799.4791666666665, 53.02419354838713, 793.75], [53.02419354838713, 793.75, 55.24193548387103, 905.4687499999998, 55.24193548387103, 802.34375, 55.24193548387103, 905.4687499999998]]
    #To save time, we compute the scale in a semi-obfuscated manner.
    coords, final_x, final_y = scale_coords(coords, 1, 1)
    coords, final_x, final_y = scale_coords(coords, 600./final_x, 700./final_y)
    coords, final_x, final_y = scale_coords(coords, x_scale, y_scale)

    #Scale must occur before shift.
    final_x += x_shift
    final_y += y_shift

    #TODO: Technically don't need to call this if both are 0.
    coords = shift_coords(x_shift, y_shift, coords)

    return write_letter(coords, final_x, final_y)
